{"ast":null,"code":"import _get from \"C:/Source/Watts-Co-Toolbox/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Source/Watts-Co-Toolbox/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Source/Watts-Co-Toolbox/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Source/Watts-Co-Toolbox/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createForOfIteratorHelper from \"C:/Source/Watts-Co-Toolbox/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:/Source/Watts-Co-Toolbox/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Source/Watts-Co-Toolbox/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ScrollDispatcher, ViewportRuler, ScrollingModule, VIEWPORT_RULER_PROVIDER } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Inject, Injectable, NgZone, Optional, NgModule, SkipSelf, ApplicationRef, ComponentFactoryResolver, Injector, ElementRef, Directive, EventEmitter, InjectionToken, Input, Output, TemplateRef, ViewContainerRef, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { Observable, Subject, merge, Subscription } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\n\nvar BlockScrollStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?} _viewportRuler\n   * @param {?} document\n   */\n  function BlockScrollStrategy(_viewportRuler, document) {\n    _classCallCheck(this, BlockScrollStrategy);\n\n    this._viewportRuler = _viewportRuler;\n    this._previousHTMLStyles = {\n      top: '',\n      left: ''\n    };\n    this._isEnabled = false;\n    this._document = document;\n  }\n  /**\n   * Attaches this scroll strategy to an overlay.\n   * @return {?}\n   */\n\n\n  _createClass(BlockScrollStrategy, [{\n    key: \"attach\",\n    value: function attach() {}\n    /**\n     * Blocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      if (this._canBeEnabled()) {\n        /** @type {?} */\n        var root =\n        /** @type {?} */\n        this._document.documentElement;\n        this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition(); // Cache the previous inline styles in case the user had set them.\n\n        this._previousHTMLStyles.left = root.style.left || '';\n        this._previousHTMLStyles.top = root.style.top || ''; // Note: we're using the `html` node, instead of the `body`, because the `body` may\n        // have the user agent margin, whereas the `html` is guaranteed not to have one.\n\n        root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n        root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n        root.classList.add('cdk-global-scrollblock');\n        this._isEnabled = true;\n      }\n    }\n    /**\n     * Unblocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (this._isEnabled) {\n        /** @type {?} */\n        var html =\n        /** @type {?} */\n        this._document.documentElement;\n        /** @type {?} */\n\n        var body =\n        /** @type {?} */\n        this._document.body;\n        /** @type {?} */\n\n        var htmlStyle =\n        /** @type {?} */\n        html.style;\n        /** @type {?} */\n\n        var bodyStyle =\n        /** @type {?} */\n        body.style;\n        /** @type {?} */\n\n        var previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n        /** @type {?} */\n\n        var previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n        this._isEnabled = false;\n        htmlStyle.left = this._previousHTMLStyles.left;\n        htmlStyle.top = this._previousHTMLStyles.top;\n        html.classList.remove('cdk-global-scrollblock'); // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n        // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n\n        htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n        window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n        htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n        bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_canBeEnabled\",\n    value: function _canBeEnabled() {\n      // Since the scroll strategies can't be singletons, we have to use a global CSS class\n      // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n      // scrolling multiple times.\n\n      /** @type {?} */\n      var html =\n      /** @type {?} */\n      this._document.documentElement;\n\n      if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n        return false;\n      }\n      /** @type {?} */\n\n\n      var body = this._document.body;\n      /** @type {?} */\n\n      var viewport = this._viewportRuler.getViewportSize();\n\n      return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n  }]);\n\n  return BlockScrollStrategy;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\n\n\nfunction getMatScrollStrategyAlreadyAttachedError() {\n  return Error(\"Scroll strategy has already been attached.\");\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\n\n\nvar CloseScrollStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?} _scrollDispatcher\n   * @param {?} _ngZone\n   * @param {?} _viewportRuler\n   * @param {?=} _config\n   */\n  function CloseScrollStrategy(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n    var _this = this;\n\n    _classCallCheck(this, CloseScrollStrategy);\n\n    this._scrollDispatcher = _scrollDispatcher;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._config = _config;\n    this._scrollSubscription = null;\n    /**\n     * Detaches the overlay ref and disables the scroll strategy.\n     */\n\n    this._detach =\n    /**\n    * @return {?}\n    */\n    function () {\n      _this.disable();\n\n      if (_this._overlayRef.hasAttached()) {\n        _this._ngZone.run(\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this._overlayRef.detach();\n        });\n      }\n    };\n  }\n  /**\n   * Attaches this scroll strategy to an overlay.\n   * @param {?} overlayRef\n   * @return {?}\n   */\n\n\n  _createClass(CloseScrollStrategy, [{\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      if (this._overlayRef) {\n        throw getMatScrollStrategyAlreadyAttachedError();\n      }\n\n      this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables the closing of the attached overlay on scroll.\n     * @return {?}\n     */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      var _this2 = this;\n\n      if (this._scrollSubscription) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var stream = this._scrollDispatcher.scrolled(0);\n\n      if (this._config && this._config.threshold && this._config.threshold > 1) {\n        this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n        this._scrollSubscription = stream.subscribe(\n        /**\n        * @return {?}\n        */\n        function () {\n          /** @type {?} */\n          var scrollPosition = _this2._viewportRuler.getViewportScrollPosition().top;\n\n          if (Math.abs(scrollPosition - _this2._initialScrollPosition) >\n          /** @type {?} */\n\n          /** @type {?} */\n          _this2._config.threshold) {\n            _this2._detach();\n          } else {\n            _this2._overlayRef.updatePosition();\n          }\n        });\n      } else {\n        this._scrollSubscription = stream.subscribe(this._detach);\n      }\n    }\n    /**\n     * Disables the closing the attached overlay on scroll.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (this._scrollSubscription) {\n        this._scrollSubscription.unsubscribe();\n\n        this._scrollSubscription = null;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this.disable();\n      this._overlayRef =\n      /** @type {?} */\n      null;\n    }\n  }]);\n\n  return CloseScrollStrategy;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Scroll strategy that doesn't do anything.\n */\n\n\nvar NoopScrollStrategy = /*#__PURE__*/function () {\n  function NoopScrollStrategy() {\n    _classCallCheck(this, NoopScrollStrategy);\n  }\n\n  _createClass(NoopScrollStrategy, [{\n    key: \"enable\",\n\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    value: function enable() {}\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {}\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach() {}\n  }]);\n\n  return NoopScrollStrategy;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is scrolled out of view\n */\n\n\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n  return scrollContainers.some(\n  /**\n  * @param {?} containerBounds\n  * @return {?}\n  */\n  function (containerBounds) {\n    /** @type {?} */\n    var outsideAbove = element.bottom < containerBounds.top;\n    /** @type {?} */\n\n    var outsideBelow = element.top > containerBounds.bottom;\n    /** @type {?} */\n\n    var outsideLeft = element.right < containerBounds.left;\n    /** @type {?} */\n\n    var outsideRight = element.left > containerBounds.right;\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is clipped\n */\n\n\nfunction isElementClippedByScrolling(element, scrollContainers) {\n  return scrollContainers.some(\n  /**\n  * @param {?} scrollContainerRect\n  * @return {?}\n  */\n  function (scrollContainerRect) {\n    /** @type {?} */\n    var clippedAbove = element.top < scrollContainerRect.top;\n    /** @type {?} */\n\n    var clippedBelow = element.bottom > scrollContainerRect.bottom;\n    /** @type {?} */\n\n    var clippedLeft = element.left < scrollContainerRect.left;\n    /** @type {?} */\n\n    var clippedRight = element.right > scrollContainerRect.right;\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\n\n\nvar RepositionScrollStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?} _scrollDispatcher\n   * @param {?} _viewportRuler\n   * @param {?} _ngZone\n   * @param {?=} _config\n   */\n  function RepositionScrollStrategy(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n    _classCallCheck(this, RepositionScrollStrategy);\n\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewportRuler = _viewportRuler;\n    this._ngZone = _ngZone;\n    this._config = _config;\n    this._scrollSubscription = null;\n  }\n  /**\n   * Attaches this scroll strategy to an overlay.\n   * @param {?} overlayRef\n   * @return {?}\n   */\n\n\n  _createClass(RepositionScrollStrategy, [{\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      if (this._overlayRef) {\n        throw getMatScrollStrategyAlreadyAttachedError();\n      }\n\n      this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      var _this3 = this;\n\n      if (!this._scrollSubscription) {\n        /** @type {?} */\n        var throttle = this._config ? this._config.scrollThrottle : 0;\n        this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(\n        /**\n        * @return {?}\n        */\n        function () {\n          _this3._overlayRef.updatePosition(); // TODO(crisbeto): make `close` on by default once all components can handle it.\n\n\n          if (_this3._config && _this3._config.autoClose) {\n            /** @type {?} */\n            var overlayRect = _this3._overlayRef.overlayElement.getBoundingClientRect();\n\n            var _this3$_viewportRuler = _this3._viewportRuler.getViewportSize(),\n                width = _this3$_viewportRuler.width,\n                height = _this3$_viewportRuler.height; // TODO(crisbeto): include all ancestor scroll containers here once\n            // we have a way of exposing the trigger element to the scroll strategy.\n\n            /** @type {?} */\n\n\n            var parentRects = [{\n              width: width,\n              height: height,\n              bottom: height,\n              right: width,\n              top: 0,\n              left: 0\n            }];\n\n            if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n              _this3.disable();\n\n              _this3._ngZone.run(\n              /**\n              * @return {?}\n              */\n              function () {\n                return _this3._overlayRef.detach();\n              });\n            }\n          }\n        });\n      }\n    }\n    /**\n     * Disables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (this._scrollSubscription) {\n        this._scrollSubscription.unsubscribe();\n\n        this._scrollSubscription = null;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this.disable();\n      this._overlayRef =\n      /** @type {?} */\n      null;\n    }\n  }]);\n\n  return RepositionScrollStrategy;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n\n\nvar ScrollStrategyOptions =\n/**\n * @param {?} _scrollDispatcher\n * @param {?} _viewportRuler\n * @param {?} _ngZone\n * @param {?} document\n */\nfunction ScrollStrategyOptions(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n  var _this4 = this;\n\n  _classCallCheck(this, ScrollStrategyOptions);\n\n  this._scrollDispatcher = _scrollDispatcher;\n  this._viewportRuler = _viewportRuler;\n  this._ngZone = _ngZone;\n  /**\n   * Do nothing on scroll.\n   */\n\n  this.noop =\n  /**\n  * @return {?}\n  */\n  function () {\n    return new NoopScrollStrategy();\n  };\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n\n\n  this.close =\n  /**\n  * @param {?=} config\n  * @return {?}\n  */\n  function (config) {\n    return new CloseScrollStrategy(_this4._scrollDispatcher, _this4._ngZone, _this4._viewportRuler, config);\n  };\n  /**\n   * Block scrolling.\n   */\n\n\n  this.block =\n  /**\n  * @return {?}\n  */\n  function () {\n    return new BlockScrollStrategy(_this4._viewportRuler, _this4._document);\n  };\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n\n\n  this.reposition =\n  /**\n  * @param {?=} config\n  * @return {?}\n  */\n  function (config) {\n    return new RepositionScrollStrategy(_this4._scrollDispatcher, _this4._viewportRuler, _this4._ngZone, config);\n  };\n\n  this._document = document;\n};\n\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) {\n  return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nScrollStrategyOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: ScrollStrategyOptions,\n  factory: ScrollStrategyOptions.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nScrollStrategyOptions.ctorParameters = function () {\n  return [{\n    type: ScrollDispatcher\n  }, {\n    type: ViewportRuler\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nScrollStrategyOptions.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function ScrollStrategyOptions_Factory() {\n    return new ScrollStrategyOptions(ɵɵinject(ScrollDispatcher), ɵɵinject(ViewportRuler), ɵɵinject(NgZone), ɵɵinject(DOCUMENT));\n  },\n  token: ScrollStrategyOptions,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.ScrollDispatcher\n    }, {\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Initial configuration used when creating an overlay.\n */\n\n\nvar OverlayConfig =\n/**\n * @param {?=} config\n */\nfunction OverlayConfig(config) {\n  _classCallCheck(this, OverlayConfig);\n\n  /**\n   * Strategy to be used when handling scroll events while the overlay is open.\n   */\n  this.scrollStrategy = new NoopScrollStrategy();\n  /**\n   * Custom class to add to the overlay pane.\n   */\n\n  this.panelClass = '';\n  /**\n   * Whether the overlay has a backdrop.\n   */\n\n  this.hasBackdrop = false;\n  /**\n   * Custom class to add to the backdrop\n   */\n\n  this.backdropClass = 'cdk-overlay-dark-backdrop';\n  /**\n   * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n\n  this.disposeOnNavigation = false;\n\n  if (config) {\n    /** @type {?} */\n    var configKeys =\n    /** @type {?} */\n    Object.keys(config);\n\n    for (var _i = 0, _configKeys = configKeys; _i < _configKeys.length; _i++) {\n      var key = _configKeys[_i];\n\n      if (config[key] !== undefined) {\n        // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n        // as \"I don't know *which* key this is, so the only valid value is the intersection\n        // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n        // is not smart enough to see that the right-hand-side is actually an access of the same\n        // exact type with the same exact key, meaning that the value type must be identical.\n        // So we use `any` to work around this.\n        this[key] =\n        /** @type {?} */\n        config[key];\n      }\n    }\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * The points of the origin element and the overlay element to connect.\n */\n\n\nvar ConnectionPositionPair =\n/**\n * @param {?} origin\n * @param {?} overlay\n * @param {?=} offsetX\n * @param {?=} offsetY\n * @param {?=} panelClass\n */\nfunction ConnectionPositionPair(origin, overlay, offsetX, offsetY, panelClass) {\n  _classCallCheck(this, ConnectionPositionPair);\n\n  this.offsetX = offsetX;\n  this.offsetY = offsetY;\n  this.panelClass = panelClass;\n  this.originX = origin.originX;\n  this.originY = origin.originY;\n  this.overlayX = overlay.overlayX;\n  this.overlayY = overlay.overlayY;\n};\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n * \\@docs-private\n */\n\n\nvar ScrollingVisibility = function ScrollingVisibility() {\n  _classCallCheck(this, ScrollingVisibility);\n};\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\n\n\nvar ConnectedOverlayPositionChange =\n/**\n * @param {?} connectionPair\n * @param {?} scrollableViewProperties\n */\nfunction ConnectedOverlayPositionChange(connectionPair, scrollableViewProperties) {\n  _classCallCheck(this, ConnectedOverlayPositionChange);\n\n  this.connectionPair = connectionPair;\n  this.scrollableViewProperties = scrollableViewProperties;\n};\n/** @nocollapse */\n\n\nConnectedOverlayPositionChange.ctorParameters = function () {\n  return [{\n    type: ConnectionPositionPair\n  }, {\n    type: ScrollingVisibility,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n/**\n * Validates whether a vertical position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\n\n\nfunction validateVerticalPosition(property, value) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(\"ConnectedPosition: Invalid \".concat(property, \" \\\"\").concat(value, \"\\\". \") + \"Expected \\\"top\\\", \\\"bottom\\\" or \\\"center\\\".\");\n  }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\n\n\nfunction validateHorizontalPosition(property, value) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(\"ConnectedPosition: Invalid \".concat(property, \" \\\"\").concat(value, \"\\\". \") + \"Expected \\\"start\\\", \\\"end\\\" or \\\"center\\\".\");\n  }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nvar OverlayKeyboardDispatcher = /*#__PURE__*/function () {\n  /**\n   * @param {?} document\n   */\n  function OverlayKeyboardDispatcher(document) {\n    var _this5 = this;\n\n    _classCallCheck(this, OverlayKeyboardDispatcher);\n\n    /**\n     * Currently attached overlays in the order they were attached.\n     */\n    this._attachedOverlays = [];\n    /**\n     * Keyboard event listener that will be attached to the body.\n     */\n\n    this._keydownListener =\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    function (event) {\n      /** @type {?} */\n      var overlays = _this5._attachedOverlays;\n\n      for (var i = overlays.length - 1; i > -1; i--) {\n        // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n        // We want to target the most recent overlay, rather than trying to match where the event came\n        // from, because some components might open an overlay, but keep focus on a trigger element\n        // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n        // because we don't want overlays that don't handle keyboard events to block the ones below\n        // them that do.\n        if (overlays[i]._keydownEventSubscriptions > 0) {\n          overlays[i]._keydownEvents.next(event);\n\n          break;\n        }\n      }\n    };\n\n    this._document = document;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(OverlayKeyboardDispatcher, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._detach();\n    }\n    /**\n     * Add a new overlay to the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(overlayRef) {\n      // Ensure that we don't get the same overlay multiple times.\n      this.remove(overlayRef); // Lazily start dispatcher once first overlay is added\n\n      if (!this._isAttached) {\n        this._document.body.addEventListener('keydown', this._keydownListener);\n\n        this._isAttached = true;\n      }\n\n      this._attachedOverlays.push(overlayRef);\n    }\n    /**\n     * Remove an overlay from the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(overlayRef) {\n      /** @type {?} */\n      var index = this._attachedOverlays.indexOf(overlayRef);\n\n      if (index > -1) {\n        this._attachedOverlays.splice(index, 1);\n      } // Remove the global listener once there are no more overlays.\n\n\n      if (this._attachedOverlays.length === 0) {\n        this._detach();\n      }\n    }\n    /**\n     * Detaches the global keyboard event listener.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_detach\",\n    value: function _detach() {\n      if (this._isAttached) {\n        this._document.body.removeEventListener('keydown', this._keydownListener);\n\n        this._isAttached = false;\n      }\n    }\n  }]);\n\n  return OverlayKeyboardDispatcher;\n}();\n\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) {\n  return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nOverlayKeyboardDispatcher.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: OverlayKeyboardDispatcher,\n  factory: OverlayKeyboardDispatcher.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nOverlayKeyboardDispatcher.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nOverlayKeyboardDispatcher.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function OverlayKeyboardDispatcher_Factory() {\n    return new OverlayKeyboardDispatcher(ɵɵinject(DOCUMENT));\n  },\n  token: OverlayKeyboardDispatcher,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} dispatcher\n * @param {?} _document\n * @return {?}\n */\n\n\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n  return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\n\n\nvar OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n  // If there is already an OverlayKeyboardDispatcher available, use that.\n  // Otherwise, provide a new one.\n  provide: OverlayKeyboardDispatcher,\n  deps: [[new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n  /** @type {?} */\n  // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n  // of the type expected by Angular\n  DOCUMENT],\n  useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Container inside which all overlays will render.\n */\n\nvar OverlayContainer = /*#__PURE__*/function () {\n  /**\n   * @param {?} document\n   */\n  function OverlayContainer(document) {\n    _classCallCheck(this, OverlayContainer);\n\n    this._document = document;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(OverlayContainer, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._containerElement && this._containerElement.parentNode) {\n        this._containerElement.parentNode.removeChild(this._containerElement);\n      }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n\n  }, {\n    key: \"getContainerElement\",\n    value: function getContainerElement() {\n      if (!this._containerElement) {\n        this._createContainer();\n      }\n\n      return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createContainer\",\n    value: function _createContainer() {\n      /** @type {?} */\n      var containerClass = 'cdk-overlay-container';\n      /** @type {?} */\n\n      var previousContainers = this._document.getElementsByClassName(containerClass); // Remove any old containers. This can happen when transitioning from the server to the client.\n\n\n      for (var i = 0; i < previousContainers.length; i++) {\n        /** @type {?} */\n        previousContainers[i].parentNode.removeChild(previousContainers[i]);\n      }\n      /** @type {?} */\n\n\n      var container = this._document.createElement('div');\n\n      container.classList.add(containerClass);\n\n      this._document.body.appendChild(container);\n\n      this._containerElement = container;\n    }\n  }]);\n\n  return OverlayContainer;\n}();\n\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) {\n  return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nOverlayContainer.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: OverlayContainer,\n  factory: OverlayContainer.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nOverlayContainer.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nOverlayContainer.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function OverlayContainer_Factory() {\n    return new OverlayContainer(ɵɵinject(DOCUMENT));\n  },\n  token: OverlayContainer,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentContainer\n * @param {?} _document\n * @return {?}\n */\n\n\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n  return parentContainer || new OverlayContainer(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\n\n\nvar OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [[new Optional(), new SkipSelf(), OverlayContainer],\n  /** @type {?} */\n  DOCUMENT],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\n\nvar OverlayRef = /*#__PURE__*/function () {\n  /**\n   * @param {?} _portalOutlet\n   * @param {?} _host\n   * @param {?} _pane\n   * @param {?} _config\n   * @param {?} _ngZone\n   * @param {?} _keyboardDispatcher\n   * @param {?} _document\n   * @param {?=} _location\n   */\n  function OverlayRef(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location) {\n    var _this6 = this;\n\n    _classCallCheck(this, OverlayRef);\n\n    this._portalOutlet = _portalOutlet;\n    this._host = _host;\n    this._pane = _pane;\n    this._config = _config;\n    this._ngZone = _ngZone;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._document = _document;\n    this._location = _location;\n    this._backdropElement = null;\n    this._backdropClick = new Subject();\n    this._attachments = new Subject();\n    this._detachments = new Subject();\n    this._locationChanges = Subscription.EMPTY;\n\n    this._backdropClickHandler =\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    function (event) {\n      return _this6._backdropClick.next(event);\n    };\n\n    this._keydownEventsObservable = new Observable(\n    /**\n    * @param {?} observer\n    * @return {?}\n    */\n    function (observer) {\n      /** @type {?} */\n      var subscription = _this6._keydownEvents.subscribe(observer);\n\n      _this6._keydownEventSubscriptions++;\n      return (\n        /**\n        * @return {?}\n        */\n        function () {\n          subscription.unsubscribe();\n          _this6._keydownEventSubscriptions--;\n        }\n      );\n    });\n    /**\n     * Stream of keydown events dispatched to this overlay.\n     */\n\n    this._keydownEvents = new Subject();\n    /**\n     * Amount of subscriptions to the keydown events.\n     */\n\n    this._keydownEventSubscriptions = 0;\n\n    if (_config.scrollStrategy) {\n      this._scrollStrategy = _config.scrollStrategy;\n\n      this._scrollStrategy.attach(this);\n    }\n\n    this._positionStrategy = _config.positionStrategy;\n  }\n  /**\n   * The overlay's HTML element\n   * @return {?}\n   */\n\n\n  _createClass(OverlayRef, [{\n    key: \"attach\",\n\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n    value: function attach(portal) {\n      var _this7 = this;\n\n      /** @type {?} */\n      var attachResult = this._portalOutlet.attach(portal);\n\n      if (this._positionStrategy) {\n        this._positionStrategy.attach(this);\n      } // Update the pane element with the given configuration.\n\n\n      if (!this._host.parentElement && this._previousHostParent) {\n        this._previousHostParent.appendChild(this._host);\n      }\n\n      this._updateStackingOrder();\n\n      this._updateElementSize();\n\n      this._updateElementDirection();\n\n      if (this._scrollStrategy) {\n        this._scrollStrategy.enable();\n      } // Update the position once the zone is stable so that the overlay will be fully rendered\n      // before attempting to position it, as the position may depend on the size of the rendered\n      // content.\n\n\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        // The overlay could've been detached before the zone has stabilized.\n        if (_this7.hasAttached()) {\n          _this7.updatePosition();\n        }\n      }); // Enable pointer events for the overlay pane element.\n\n\n      this._togglePointerEvents(true);\n\n      if (this._config.hasBackdrop) {\n        this._attachBackdrop();\n      }\n\n      if (this._config.panelClass) {\n        this._toggleClasses(this._pane, this._config.panelClass, true);\n      } // Only emit the `attachments` event once all other setup is done.\n\n\n      this._attachments.next(); // Track this overlay by the keyboard dispatcher\n\n\n      this._keyboardDispatcher.add(this); // @breaking-change 8.0.0 remove the null check for `_location`\n      // once the constructor parameter is made required.\n\n\n      if (this._config.disposeOnNavigation && this._location) {\n        this._locationChanges = this._location.subscribe(\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this7.dispose();\n        });\n      }\n\n      return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @return {?} The portal detachment result.\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      if (!this.hasAttached()) {\n        return;\n      }\n\n      this.detachBackdrop(); // When the overlay is detached, the pane element should disable pointer events.\n      // This is necessary because otherwise the pane element will cover the page and disable\n      // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n\n      this._togglePointerEvents(false);\n\n      if (this._positionStrategy && this._positionStrategy.detach) {\n        this._positionStrategy.detach();\n      }\n\n      if (this._scrollStrategy) {\n        this._scrollStrategy.disable();\n      }\n      /** @type {?} */\n\n\n      var detachmentResult = this._portalOutlet.detach(); // Only emit after everything is detached.\n\n\n      this._detachments.next(); // Remove this overlay from keyboard dispatcher tracking.\n\n\n      this._keyboardDispatcher.remove(this); // Keeping the host element in DOM the can cause scroll jank, because it still gets\n      // rendered, even though it's transparent and unclickable which is why we remove it.\n\n\n      this._detachContentWhenStable(); // Stop listening for location changes.\n\n\n      this._locationChanges.unsubscribe();\n\n      return detachmentResult;\n    }\n    /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      /** @type {?} */\n      var isAttached = this.hasAttached();\n\n      if (this._positionStrategy) {\n        this._positionStrategy.dispose();\n      }\n\n      this._disposeScrollStrategy();\n\n      this.detachBackdrop();\n\n      this._locationChanges.unsubscribe();\n\n      this._keyboardDispatcher.remove(this);\n\n      this._portalOutlet.dispose();\n\n      this._attachments.complete();\n\n      this._backdropClick.complete();\n\n      this._keydownEvents.complete();\n\n      if (this._host && this._host.parentNode) {\n        this._host.parentNode.removeChild(this._host);\n\n        this._host =\n        /** @type {?} */\n        null;\n      }\n\n      this._previousHostParent = this._pane =\n      /** @type {?} */\n      null;\n\n      if (isAttached) {\n        this._detachments.next();\n      }\n\n      this._detachments.complete();\n    }\n    /**\n     * Whether the overlay has attached content.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasAttached\",\n    value: function hasAttached() {\n      return this._portalOutlet.hasAttached();\n    }\n    /**\n     * Gets an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n\n  }, {\n    key: \"backdropClick\",\n    value: function backdropClick() {\n      return this._backdropClick.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been attached.\n     * @return {?}\n     */\n\n  }, {\n    key: \"attachments\",\n    value: function attachments() {\n      return this._attachments.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been detached.\n     * @return {?}\n     */\n\n  }, {\n    key: \"detachments\",\n    value: function detachments() {\n      return this._detachments.asObservable();\n    }\n    /**\n     * Gets an observable of keydown events targeted to this overlay.\n     * @return {?}\n     */\n\n  }, {\n    key: \"keydownEvents\",\n    value: function keydownEvents() {\n      return this._keydownEventsObservable;\n    }\n    /**\n     * Gets the current overlay configuration, which is immutable.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this._config;\n    }\n    /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      if (this._positionStrategy) {\n        this._positionStrategy.apply();\n      }\n    }\n    /**\n     * Switches to a new position strategy and updates the overlay position.\n     * @param {?} strategy\n     * @return {?}\n     */\n\n  }, {\n    key: \"updatePositionStrategy\",\n    value: function updatePositionStrategy(strategy) {\n      if (strategy === this._positionStrategy) {\n        return;\n      }\n\n      if (this._positionStrategy) {\n        this._positionStrategy.dispose();\n      }\n\n      this._positionStrategy = strategy;\n\n      if (this.hasAttached()) {\n        strategy.attach(this);\n        this.updatePosition();\n      }\n    }\n    /**\n     * Update the size properties of the overlay.\n     * @param {?} sizeConfig\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateSize\",\n    value: function updateSize(sizeConfig) {\n      this._config = Object.assign({}, this._config, sizeConfig);\n\n      this._updateElementSize();\n    }\n    /**\n     * Sets the LTR/RTL direction for the overlay.\n     * @param {?} dir\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDirection\",\n    value: function setDirection(dir) {\n      this._config = Object.assign({}, this._config, {\n        direction: dir\n      });\n\n      this._updateElementDirection();\n    }\n    /**\n     * Add a CSS class or an array of classes to the overlay pane.\n     * @param {?} classes\n     * @return {?}\n     */\n\n  }, {\n    key: \"addPanelClass\",\n    value: function addPanelClass(classes) {\n      if (this._pane) {\n        this._toggleClasses(this._pane, classes, true);\n      }\n    }\n    /**\n     * Remove a CSS class or an array of classes from the overlay pane.\n     * @param {?} classes\n     * @return {?}\n     */\n\n  }, {\n    key: \"removePanelClass\",\n    value: function removePanelClass(classes) {\n      if (this._pane) {\n        this._toggleClasses(this._pane, classes, false);\n      }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      /** @type {?} */\n      var direction = this._config.direction;\n\n      if (!direction) {\n        return 'ltr';\n      }\n\n      return typeof direction === 'string' ? direction : direction.value;\n    }\n    /**\n     * Switches to a new scroll strategy.\n     * @param {?} strategy\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateScrollStrategy\",\n    value: function updateScrollStrategy(strategy) {\n      if (strategy === this._scrollStrategy) {\n        return;\n      }\n\n      this._disposeScrollStrategy();\n\n      this._scrollStrategy = strategy;\n\n      if (this.hasAttached()) {\n        strategy.attach(this);\n        strategy.enable();\n      }\n    }\n    /**\n     * Updates the text direction of the overlay panel.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateElementDirection\",\n    value: function _updateElementDirection() {\n      this._host.setAttribute('dir', this.getDirection());\n    }\n    /**\n     * Updates the size of the overlay element based on the overlay config.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateElementSize\",\n    value: function _updateElementSize() {\n      if (!this._pane) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var style = this._pane.style;\n      style.width = coerceCssPixelValue(this._config.width);\n      style.height = coerceCssPixelValue(this._config.height);\n      style.minWidth = coerceCssPixelValue(this._config.minWidth);\n      style.minHeight = coerceCssPixelValue(this._config.minHeight);\n      style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n      style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /**\n     * Toggles the pointer events for the overlay pane element.\n     * @private\n     * @param {?} enablePointer\n     * @return {?}\n     */\n\n  }, {\n    key: \"_togglePointerEvents\",\n    value: function _togglePointerEvents(enablePointer) {\n      this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    }\n    /**\n     * Attaches a backdrop for this overlay.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_attachBackdrop\",\n    value: function _attachBackdrop() {\n      var _this8 = this;\n\n      /** @type {?} */\n      var showingClass = 'cdk-overlay-backdrop-showing';\n      this._backdropElement = this._document.createElement('div');\n\n      this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n      if (this._config.backdropClass) {\n        this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n      } // Insert the backdrop before the pane in the DOM order,\n      // in order to handle stacked overlays properly.\n\n\n      /** @type {?} */\n      this._host.parentElement.insertBefore(this._backdropElement, this._host); // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n      // action desired when such a click occurs (usually closing the overlay).\n\n\n      this._backdropElement.addEventListener('click', this._backdropClickHandler); // Add class to fade-in the backdrop after one frame.\n\n\n      if (typeof requestAnimationFrame !== 'undefined') {\n        this._ngZone.runOutsideAngular(\n        /**\n        * @return {?}\n        */\n        function () {\n          requestAnimationFrame(\n          /**\n          * @return {?}\n          */\n          function () {\n            if (_this8._backdropElement) {\n              _this8._backdropElement.classList.add(showingClass);\n            }\n          });\n        });\n      } else {\n        this._backdropElement.classList.add(showingClass);\n      }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateStackingOrder\",\n    value: function _updateStackingOrder() {\n      if (this._host.nextSibling) {\n        /** @type {?} */\n        this._host.parentNode.appendChild(this._host);\n      }\n    }\n    /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n\n  }, {\n    key: \"detachBackdrop\",\n    value: function detachBackdrop() {\n      var _this9 = this;\n\n      /** @type {?} */\n      var backdropToDetach = this._backdropElement;\n\n      if (!backdropToDetach) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var timeoutId;\n      /** @type {?} */\n\n      var finishDetach =\n      /**\n      * @return {?}\n      */\n      function finishDetach() {\n        // It may not be attached to anything in certain cases (e.g. unit tests).\n        if (backdropToDetach) {\n          backdropToDetach.removeEventListener('click', _this9._backdropClickHandler);\n          backdropToDetach.removeEventListener('transitionend', finishDetach);\n\n          if (backdropToDetach.parentNode) {\n            backdropToDetach.parentNode.removeChild(backdropToDetach);\n          }\n        } // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n\n\n        if (_this9._backdropElement == backdropToDetach) {\n          _this9._backdropElement = null;\n        }\n\n        if (_this9._config.backdropClass) {\n          _this9._toggleClasses(\n          /** @type {?} */\n          backdropToDetach, _this9._config.backdropClass, false);\n        }\n\n        clearTimeout(timeoutId);\n      };\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n      this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      function () {\n        /** @type {?} */\n        backdropToDetach.addEventListener('transitionend', finishDetach);\n      }); // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n\n\n      backdropToDetach.style.pointerEvents = 'none'; // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n\n      timeoutId = this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      function () {\n        return setTimeout(finishDetach, 500);\n      });\n    }\n    /**\n     * Toggles a single CSS class or an array of classes on an element.\n     * @private\n     * @param {?} element\n     * @param {?} cssClasses\n     * @param {?} isAdd\n     * @return {?}\n     */\n\n  }, {\n    key: \"_toggleClasses\",\n    value: function _toggleClasses(element, cssClasses, isAdd) {\n      /** @type {?} */\n      var classList = element.classList;\n      coerceArray(cssClasses).forEach(\n      /**\n      * @param {?} cssClass\n      * @return {?}\n      */\n      function (cssClass) {\n        // We can't do a spread here, because IE doesn't support setting multiple classes.\n        // Also trying to add an empty string to a DOMTokenList will throw.\n        if (cssClass) {\n          isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n        }\n      });\n    }\n    /**\n     * Detaches the overlay content next time the zone stabilizes.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_detachContentWhenStable\",\n    value: function _detachContentWhenStable() {\n      var _this10 = this;\n\n      // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n      // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n      // be patched to run inside the zone, which will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      function () {\n        // We can't remove the host here immediately, because the overlay pane's content\n        // might still be animating. This stream helps us avoid interrupting the animation\n        // by waiting for the pane to become empty.\n\n        /** @type {?} */\n        var subscription = _this10._ngZone.onStable.asObservable().pipe(takeUntil(merge(_this10._attachments, _this10._detachments))).subscribe(\n        /**\n        * @return {?}\n        */\n        function () {\n          // Needs a couple of checks for the pane and host, because\n          // they may have been removed by the time the zone stabilizes.\n          if (!_this10._pane || !_this10._host || _this10._pane.children.length === 0) {\n            if (_this10._pane && _this10._config.panelClass) {\n              _this10._toggleClasses(_this10._pane, _this10._config.panelClass, false);\n            }\n\n            if (_this10._host && _this10._host.parentElement) {\n              _this10._previousHostParent = _this10._host.parentElement;\n\n              _this10._previousHostParent.removeChild(_this10._host);\n            }\n\n            subscription.unsubscribe();\n          }\n        });\n      });\n    }\n    /**\n     * Disposes of a scroll strategy.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_disposeScrollStrategy\",\n    value: function _disposeScrollStrategy() {\n      /** @type {?} */\n      var scrollStrategy = this._scrollStrategy;\n\n      if (scrollStrategy) {\n        scrollStrategy.disable();\n\n        if (scrollStrategy.detach) {\n          scrollStrategy.detach();\n        }\n      }\n    }\n  }, {\n    key: \"overlayElement\",\n    get: function get() {\n      return this._pane;\n    }\n    /**\n     * The overlay's backdrop HTML element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"backdropElement\",\n    get: function get() {\n      return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hostElement\",\n    get: function get() {\n      return this._host;\n    }\n  }]);\n\n  return OverlayRef;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/**\n * Class to be added to the overlay bounding box.\n * @type {?}\n */\n\n\nvar boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\n\nvar FlexibleConnectedPositionStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?} connectedTo\n   * @param {?} _viewportRuler\n   * @param {?} _document\n   * @param {?} _platform\n   * @param {?} _overlayContainer\n   */\n  function FlexibleConnectedPositionStrategy(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n    _classCallCheck(this, FlexibleConnectedPositionStrategy);\n\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n    /**\n     * Last size used for the bounding box. Used to avoid resizing the overlay after open.\n     */\n\n    this._lastBoundingBoxSize = {\n      width: 0,\n      height: 0\n    };\n    /**\n     * Whether the overlay was pushed in a previous positioning.\n     */\n\n    this._isPushed = false;\n    /**\n     * Whether the overlay can be pushed on-screen on the initial open.\n     */\n\n    this._canPush = true;\n    /**\n     * Whether the overlay can grow via flexible width/height after the initial open.\n     */\n\n    this._growAfterOpen = false;\n    /**\n     * Whether the overlay's width and height can be constrained to fit within the viewport.\n     */\n\n    this._hasFlexibleDimensions = true;\n    /**\n     * Whether the overlay position is locked.\n     */\n\n    this._positionLocked = false;\n    /**\n     * Amount of space that must be maintained between the overlay and the edge of the viewport.\n     */\n\n    this._viewportMargin = 0;\n    /**\n     * The Scrollable containers used to check scrollable view properties on position change.\n     */\n\n    this._scrollables = [];\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     */\n\n    this._preferredPositions = [];\n    /**\n     * Subject that emits whenever the position changes.\n     */\n\n    this._positionChanges = new Subject();\n    /**\n     * Subscription to viewport size changes.\n     */\n\n    this._resizeSubscription = Subscription.EMPTY;\n    /**\n     * Default offset for the overlay along the x axis.\n     */\n\n    this._offsetX = 0;\n    /**\n     * Default offset for the overlay along the y axis.\n     */\n\n    this._offsetY = 0;\n    /**\n     * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.\n     */\n\n    this._appliedPanelClasses = [];\n    /**\n     * Observable sequence of position changes.\n     */\n\n    this.positionChanges = this._positionChanges.asObservable();\n    this.setOrigin(connectedTo);\n  }\n  /**\n   * Ordered list of preferred positions, from most to least desirable.\n   * @return {?}\n   */\n\n\n  _createClass(FlexibleConnectedPositionStrategy, [{\n    key: \"attach\",\n\n    /**\n     * Attaches this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    value: function attach(overlayRef) {\n      var _this11 = this;\n\n      if (this._overlayRef && overlayRef !== this._overlayRef) {\n        throw Error('This position strategy is already attached to an overlay');\n      }\n\n      this._validatePositions();\n\n      overlayRef.hostElement.classList.add(boundingBoxClass);\n      this._overlayRef = overlayRef;\n      this._boundingBox = overlayRef.hostElement;\n      this._pane = overlayRef.overlayElement;\n      this._isDisposed = false;\n      this._isInitialRender = true;\n      this._lastPosition = null;\n\n      this._resizeSubscription.unsubscribe();\n\n      this._resizeSubscription = this._viewportRuler.change().subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        // When the window is resized, we want to trigger the next reposition as if it\n        // was an initial render, in order for the strategy to pick a new optimal position,\n        // otherwise position locking will cause it to stay at the old one.\n        _this11._isInitialRender = true;\n\n        _this11.apply();\n      });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"apply\",\n    value: function apply() {\n      // We shouldn't do anything if the strategy was disposed or we're on the server.\n      if (this._isDisposed || !this._platform.isBrowser) {\n        return;\n      } // If the position has been applied already (e.g. when the overlay was opened) and the\n      // consumer opted into locking in the position, re-use the old position, in order to\n      // prevent the overlay from jumping around.\n\n\n      if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n        this.reapplyLastPosition();\n        return;\n      }\n\n      this._clearPanelClasses();\n\n      this._resetOverlayElementStyles();\n\n      this._resetBoundingBoxStyles(); // We need the bounding rects for the origin and the overlay to determine how to position\n      // the overlay relative to the origin.\n      // We use the viewport rect to determine whether a position would go off-screen.\n\n\n      this._viewportRect = this._getNarrowedViewportRect();\n      this._originRect = this._getOriginRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      /** @type {?} */\n\n      var originRect = this._originRect;\n      /** @type {?} */\n\n      var overlayRect = this._overlayRect;\n      /** @type {?} */\n\n      var viewportRect = this._viewportRect; // Positions where the overlay will fit with flexible dimensions.\n\n      /** @type {?} */\n\n      var flexibleFits = []; // Fallback if none of the preferred positions fit within the viewport.\n\n      /** @type {?} */\n\n      var fallback; // Go through each of the preferred positions looking for a good fit.\n      // If a good fit is found, it will be applied immediately.\n\n      var _iterator = _createForOfIteratorHelper(this._preferredPositions),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var pos = _step.value;\n\n          // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n\n          /** @type {?} */\n          var originPoint = this._getOriginPoint(originRect, pos); // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n          // overlay in this position. We use the top-left corner for calculations and later translate\n          // this into an appropriate (top, left, bottom, right) style.\n\n          /** @type {?} */\n\n\n          var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos); // Calculate how well the overlay would fit into the viewport with this point.\n\n          /** @type {?} */\n\n\n          var overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos); // If the overlay, without any further work, fits into the viewport, use this position.\n\n\n          if (overlayFit.isCompletelyWithinViewport) {\n            this._isPushed = false;\n\n            this._applyPosition(pos, originPoint);\n\n            return;\n          } // If the overlay has flexible dimensions, we can use this position\n          // so long as there's enough space for the minimum dimensions.\n\n\n          if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n            // Save positions where the overlay will fit with flexible dimensions. We will use these\n            // if none of the positions fit *without* flexible dimensions.\n            flexibleFits.push({\n              position: pos,\n              origin: originPoint,\n              overlayRect: overlayRect,\n              boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n            });\n            continue;\n          } // If the current preferred position does not fit on the screen, remember the position\n          // if it has more visible area on-screen than we've seen and move onto the next preferred\n          // position.\n\n\n          if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n            fallback = {\n              overlayFit: overlayFit,\n              overlayPoint: overlayPoint,\n              originPoint: originPoint,\n              position: pos,\n              overlayRect: overlayRect\n            };\n          }\n        } // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (flexibleFits.length) {\n        /** @type {?} */\n        var bestFit = null;\n        /** @type {?} */\n\n        var bestScore = -1;\n\n        var _iterator2 = _createForOfIteratorHelper(flexibleFits),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var fit = _step2.value;\n\n            /** @type {?} */\n            var score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n\n            if (score > bestScore) {\n              bestScore = score;\n              bestFit = fit;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        this._isPushed = false;\n\n        this._applyPosition(\n        /** @type {?} */\n        bestFit.position,\n        /** @type {?} */\n        bestFit.origin);\n\n        return;\n      } // When none of the preferred positions fit within the viewport, take the position\n      // that went off-screen the least and attempt to push it on-screen.\n\n\n      if (this._canPush) {\n        // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n        this._isPushed = true;\n\n        this._applyPosition(\n        /** @type {?} */\n        fallback.position,\n        /** @type {?} */\n        fallback.originPoint);\n\n        return;\n      } // All options for getting the overlay within the viewport have been exhausted, so go with the\n      // position that went off-screen the least.\n\n\n      this._applyPosition(\n      /** @type {?} */\n      fallback.position,\n      /** @type {?} */\n      fallback.originPoint);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this._clearPanelClasses();\n\n      this._lastPosition = null;\n      this._previousPushAmount = null;\n\n      this._resizeSubscription.unsubscribe();\n    }\n    /**\n     * Cleanup after the element gets destroyed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this._isDisposed) {\n        return;\n      } // We can't use `_resetBoundingBoxStyles` here, because it resets\n      // some properties to zero, rather than removing them.\n\n\n      if (this._boundingBox) {\n        extendStyles(this._boundingBox.style,\n        /** @type {?} */\n        {\n          top: '',\n          left: '',\n          right: '',\n          bottom: '',\n          height: '',\n          width: '',\n          alignItems: '',\n          justifyContent: ''\n        });\n      }\n\n      if (this._pane) {\n        this._resetOverlayElementStyles();\n      }\n\n      if (this._overlayRef) {\n        this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n      }\n\n      this.detach();\n\n      this._positionChanges.complete();\n\n      this._overlayRef = this._boundingBox =\n      /** @type {?} */\n      null;\n      this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"reapplyLastPosition\",\n    value: function reapplyLastPosition() {\n      if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._viewportRect = this._getNarrowedViewportRect();\n        /** @type {?} */\n\n        var lastPosition = this._lastPosition || this._preferredPositions[0];\n        /** @type {?} */\n\n        var originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n        this._applyPosition(lastPosition, originPoint);\n      }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} scrollables\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withScrollableContainers\",\n    value: function withScrollableContainers(scrollables) {\n      /** @type {?} */\n      this._scrollables = scrollables;\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Adds new preferred positions.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} positions List of positions options for this overlay.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withPositions\",\n    value: function withPositions(positions) {\n      /** @type {?} */\n      this._preferredPositions = positions; // If the last calculated position object isn't part of the positions anymore, clear\n      // it in order to avoid it being picked up if the consumer tries to re-apply.\n\n      if (positions.indexOf(\n      /** @type {?} */\n\n      /** @type {?} */\n      this._lastPosition) === -1) {\n        /** @type {?} */\n        this._lastPosition = null;\n      }\n\n      /** @type {?} */\n      this._validatePositions();\n\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withViewportMargin\",\n    value: function withViewportMargin(margin) {\n      /** @type {?} */\n      this._viewportMargin = margin;\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets whether the overlay's width and height can be constrained to fit within the viewport.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} flexibleDimensions\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withFlexibleDimensions\",\n    value: function withFlexibleDimensions() {\n      var flexibleDimensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      /** @type {?} */\n      this._hasFlexibleDimensions = flexibleDimensions;\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets whether the overlay can grow after the initial open via flexible width/height.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} growAfterOpen\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withGrowAfterOpen\",\n    value: function withGrowAfterOpen() {\n      var growAfterOpen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      /** @type {?} */\n      this._growAfterOpen = growAfterOpen;\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} canPush\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withPush\",\n    value: function withPush() {\n      var canPush = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      /** @type {?} */\n      this._canPush = canPush;\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} isLocked Whether the overlay should locked in.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withLockedPosition\",\n    value: function withLockedPosition() {\n      var isLocked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      /** @type {?} */\n      this._positionLocked = isLocked;\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} origin Reference to the new origin.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"setOrigin\",\n    value: function setOrigin(origin) {\n      /** @type {?} */\n      this._origin = origin;\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the X axis.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withDefaultOffsetX\",\n    value: function withDefaultOffsetX(offset) {\n      /** @type {?} */\n      this._offsetX = offset;\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the Y axis.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withDefaultOffsetY\",\n    value: function withDefaultOffsetY(offset) {\n      /** @type {?} */\n      this._offsetY = offset;\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withTransformOriginOn\",\n    value: function withTransformOriginOn(selector) {\n      /** @type {?} */\n      this._transformOriginSelector = selector;\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @private\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOriginPoint\",\n    value: function _getOriginPoint(originRect, pos) {\n      /** @type {?} */\n      var x;\n\n      if (pos.originX == 'center') {\n        // Note: when centering we should always use the `left`\n        // offset, otherwise the position will be wrong in RTL.\n        x = originRect.left + originRect.width / 2;\n      } else {\n        /** @type {?} */\n        var startX = this._isRtl() ? originRect.right : originRect.left;\n        /** @type {?} */\n\n        var endX = this._isRtl() ? originRect.left : originRect.right;\n        x = pos.originX == 'start' ? startX : endX;\n      }\n      /** @type {?} */\n\n\n      var y;\n\n      if (pos.originY == 'center') {\n        y = originRect.top + originRect.height / 2;\n      } else {\n        y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     * @private\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} pos\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOverlayPoint\",\n    value: function _getOverlayPoint(originPoint, overlayRect, pos) {\n      // Calculate the (overlayStartX, overlayStartY), the start of the\n      // potential overlay position relative to the origin point.\n\n      /** @type {?} */\n      var overlayStartX;\n\n      if (pos.overlayX == 'center') {\n        overlayStartX = -overlayRect.width / 2;\n      } else if (pos.overlayX === 'start') {\n        overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n      } else {\n        overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n      }\n      /** @type {?} */\n\n\n      var overlayStartY;\n\n      if (pos.overlayY == 'center') {\n        overlayStartY = -overlayRect.height / 2;\n      } else {\n        overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n      } // The (x, y) coordinates of the overlay.\n\n\n      return {\n        x: originPoint.x + overlayStartX,\n        y: originPoint.y + overlayStartY\n      };\n    }\n    /**\n     * Gets how well an overlay at the given point will fit within the viewport.\n     * @private\n     * @param {?} point\n     * @param {?} overlay\n     * @param {?} viewport\n     * @param {?} position\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOverlayFit\",\n    value: function _getOverlayFit(point, overlay, viewport, position) {\n      var x = point.x,\n          y = point.y;\n      /** @type {?} */\n\n      var offsetX = this._getOffset(position, 'x');\n      /** @type {?} */\n\n\n      var offsetY = this._getOffset(position, 'y'); // Account for the offsets since they could push the overlay out of the viewport.\n\n\n      if (offsetX) {\n        x += offsetX;\n      }\n\n      if (offsetY) {\n        y += offsetY;\n      } // How much the overlay would overflow at this position, on each side.\n\n      /** @type {?} */\n\n\n      var leftOverflow = 0 - x;\n      /** @type {?} */\n\n      var rightOverflow = x + overlay.width - viewport.width;\n      /** @type {?} */\n\n      var topOverflow = 0 - y;\n      /** @type {?} */\n\n      var bottomOverflow = y + overlay.height - viewport.height; // Visible parts of the element on each axis.\n\n      /** @type {?} */\n\n      var visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n      /** @type {?} */\n\n\n      var visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n      /** @type {?} */\n\n\n      var visibleArea = visibleWidth * visibleHeight;\n      return {\n        visibleArea: visibleArea,\n        isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n        fitsInViewportVertically: visibleHeight === overlay.height,\n        fitsInViewportHorizontally: visibleWidth == overlay.width\n      };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @private\n     * @param {?} fit How well the overlay fits in the viewport at some position.\n     * @param {?} point The (x, y) coordinates of the overlat at some position.\n     * @param {?} viewport The geometry of the viewport.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_canFitWithFlexibleDimensions\",\n    value: function _canFitWithFlexibleDimensions(fit, point, viewport) {\n      if (this._hasFlexibleDimensions) {\n        /** @type {?} */\n        var availableHeight = viewport.bottom - point.y;\n        /** @type {?} */\n\n        var availableWidth = viewport.right - point.x;\n        /** @type {?} */\n\n        var minHeight = this._overlayRef.getConfig().minHeight;\n        /** @type {?} */\n\n\n        var minWidth = this._overlayRef.getConfig().minWidth;\n        /** @type {?} */\n\n\n        var verticalFit = fit.fitsInViewportVertically || minHeight != null && minHeight <= availableHeight;\n        /** @type {?} */\n\n        var horizontalFit = fit.fitsInViewportHorizontally || minWidth != null && minWidth <= availableWidth;\n        return verticalFit && horizontalFit;\n      }\n\n      return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @private\n     * @param {?} start Starting point from which the overlay is pushed.\n     * @param {?} overlay Dimensions of the overlay.\n     * @param {?} scrollPosition Current viewport scroll position.\n     * @return {?} The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n\n  }, {\n    key: \"_pushOverlayOnScreen\",\n    value: function _pushOverlayOnScreen(start, overlay, scrollPosition) {\n      // If the position is locked and we've pushed the overlay already, reuse the previous push\n      // amount, rather than pushing it again. If we were to continue pushing, the element would\n      // remain in the viewport, which goes against the expectations when position locking is enabled.\n      if (this._previousPushAmount && this._positionLocked) {\n        return {\n          x: start.x + this._previousPushAmount.x,\n          y: start.y + this._previousPushAmount.y\n        };\n      }\n      /** @type {?} */\n\n\n      var viewport = this._viewportRect; // Determine how much the overlay goes outside the viewport on each\n      // side, which we'll use to decide which direction to push it.\n\n      /** @type {?} */\n\n      var overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n      /** @type {?} */\n\n      var overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n      /** @type {?} */\n\n      var overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n      /** @type {?} */\n\n      var overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0); // Amount by which to push the overlay in each axis such that it remains on-screen.\n\n      /** @type {?} */\n\n      var pushX = 0;\n      /** @type {?} */\n\n      var pushY = 0; // If the overlay fits completely within the bounds of the viewport, push it from whichever\n      // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n      // viewport and allow for the trailing end of the overlay to go out of bounds.\n\n      if (overlay.width <= viewport.width) {\n        pushX = overflowLeft || -overflowRight;\n      } else {\n        pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n      }\n\n      if (overlay.height <= viewport.height) {\n        pushY = overflowTop || -overflowBottom;\n      } else {\n        pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n      }\n\n      this._previousPushAmount = {\n        x: pushX,\n        y: pushY\n      };\n      return {\n        x: start.x + pushX,\n        y: start.y + pushY\n      };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @private\n     * @param {?} position The position preference\n     * @param {?} originPoint The point on the origin element where the overlay is connected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_applyPosition\",\n    value: function _applyPosition(position, originPoint) {\n      this._setTransformOrigin(position);\n\n      this._setOverlayElementStyles(originPoint, position);\n\n      this._setBoundingBoxStyles(originPoint, position);\n\n      if (position.panelClass) {\n        this._addPanelClasses(position.panelClass);\n      } // Save the last connected position in case the position needs to be re-calculated.\n\n\n      this._lastPosition = position; // Notify that the position has been changed along with its change properties.\n      // We only emit if we've got any subscriptions, because the scroll visibility\n      // calculcations can be somewhat expensive.\n\n      if (this._positionChanges.observers.length) {\n        /** @type {?} */\n        var scrollableViewProperties = this._getScrollVisibility();\n        /** @type {?} */\n\n\n        var changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n\n        this._positionChanges.next(changeEvent);\n      }\n\n      this._isInitialRender = false;\n    }\n    /**\n     * Sets the transform origin based on the configured selector and the passed-in position.\n     * @private\n     * @param {?} position\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setTransformOrigin\",\n    value: function _setTransformOrigin(position) {\n      if (!this._transformOriginSelector) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var elements =\n      /** @type {?} */\n      this._boundingBox.querySelectorAll(this._transformOriginSelector);\n      /** @type {?} */\n\n\n      var xOrigin;\n      /** @type {?} */\n\n      var yOrigin = position.overlayY;\n\n      if (position.overlayX === 'center') {\n        xOrigin = 'center';\n      } else if (this._isRtl()) {\n        xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n      } else {\n        xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n      }\n\n      for (var i = 0; i < elements.length; i++) {\n        elements[i].style.transformOrigin = \"\".concat(xOrigin, \" \").concat(yOrigin);\n      }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     * @private\n     * @param {?} origin\n     * @param {?} position\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculateBoundingBoxRect\",\n    value: function _calculateBoundingBoxRect(origin, position) {\n      /** @type {?} */\n      var viewport = this._viewportRect;\n      /** @type {?} */\n\n      var isRtl = this._isRtl();\n      /** @type {?} */\n\n\n      var height;\n      /** @type {?} */\n\n      var top;\n      /** @type {?} */\n\n      var bottom;\n\n      if (position.overlayY === 'top') {\n        // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n        top = origin.y;\n        height = viewport.height - top + this._viewportMargin;\n      } else if (position.overlayY === 'bottom') {\n        // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n        // the viewport margin back in, because the viewport rect is narrowed down to remove the\n        // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n        bottom = viewport.height - origin.y + this._viewportMargin * 2;\n        height = viewport.height - bottom + this._viewportMargin;\n      } else {\n        // If neither top nor bottom, it means that the overlay is vertically centered on the\n        // origin point. Note that we want the position relative to the viewport, rather than\n        // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n        // `origin.y - viewport.top`.\n\n        /** @type {?} */\n        var smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n        /** @type {?} */\n\n        var previousHeight = this._lastBoundingBoxSize.height;\n        height = smallestDistanceToViewportEdge * 2;\n        top = origin.y - smallestDistanceToViewportEdge;\n\n        if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n          top = origin.y - previousHeight / 2;\n        }\n      } // The overlay is opening 'right-ward' (the content flows to the right).\n\n      /** @type {?} */\n\n\n      var isBoundedByRightViewportEdge = position.overlayX === 'start' && !isRtl || position.overlayX === 'end' && isRtl; // The overlay is opening 'left-ward' (the content flows to the left).\n\n      /** @type {?} */\n\n      var isBoundedByLeftViewportEdge = position.overlayX === 'end' && !isRtl || position.overlayX === 'start' && isRtl;\n      /** @type {?} */\n\n      var width;\n      /** @type {?} */\n\n      var left;\n      /** @type {?} */\n\n      var right;\n\n      if (isBoundedByLeftViewportEdge) {\n        right = viewport.width - origin.x + this._viewportMargin;\n        width = origin.x - this._viewportMargin;\n      } else if (isBoundedByRightViewportEdge) {\n        left = origin.x;\n        width = viewport.right - origin.x;\n      } else {\n        // If neither start nor end, it means that the overlay is horizontally centered on the\n        // origin point. Note that we want the position relative to the viewport, rather than\n        // the page, which is why we don't use something like `viewport.right - origin.x` and\n        // `origin.x - viewport.left`.\n\n        /** @type {?} */\n        var _smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n        /** @type {?} */\n\n\n        var previousWidth = this._lastBoundingBoxSize.width;\n        width = _smallestDistanceToViewportEdge * 2;\n        left = origin.x - _smallestDistanceToViewportEdge;\n\n        if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n          left = origin.x - previousWidth / 2;\n        }\n      }\n\n      return {\n        top:\n        /** @type {?} */\n        top,\n        left:\n        /** @type {?} */\n        left,\n        bottom:\n        /** @type {?} */\n        bottom,\n        right:\n        /** @type {?} */\n        right,\n        width: width,\n        height: height\n      };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @private\n     * @param {?} origin The point on the origin element where the overlay is connected.\n     * @param {?} position The position preference\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setBoundingBoxStyles\",\n    value: function _setBoundingBoxStyles(origin, position) {\n      /** @type {?} */\n      var boundingBoxRect = this._calculateBoundingBoxRect(origin, position); // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n      // when applying a new size.\n\n\n      if (!this._isInitialRender && !this._growAfterOpen) {\n        boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n        boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n      }\n      /** @type {?} */\n\n\n      var styles =\n      /** @type {?} */\n      {};\n\n      if (this._hasExactPosition()) {\n        styles.top = styles.left = '0';\n        styles.bottom = styles.right = '';\n        styles.width = styles.height = '100%';\n      } else {\n        /** @type {?} */\n        var maxHeight = this._overlayRef.getConfig().maxHeight;\n        /** @type {?} */\n\n\n        var maxWidth = this._overlayRef.getConfig().maxWidth;\n\n        styles.height = coerceCssPixelValue(boundingBoxRect.height);\n        styles.top = coerceCssPixelValue(boundingBoxRect.top);\n        styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n        styles.width = coerceCssPixelValue(boundingBoxRect.width);\n        styles.left = coerceCssPixelValue(boundingBoxRect.left);\n        styles.right = coerceCssPixelValue(boundingBoxRect.right); // Push the pane content towards the proper direction.\n\n        if (position.overlayX === 'center') {\n          styles.alignItems = 'center';\n        } else {\n          styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n        }\n\n        if (position.overlayY === 'center') {\n          styles.justifyContent = 'center';\n        } else {\n          styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n        }\n\n        if (maxHeight) {\n          styles.maxHeight = coerceCssPixelValue(maxHeight);\n        }\n\n        if (maxWidth) {\n          styles.maxWidth = coerceCssPixelValue(maxWidth);\n        }\n      }\n\n      this._lastBoundingBoxSize = boundingBoxRect;\n      extendStyles(\n      /** @type {?} */\n      this._boundingBox.style, styles);\n    }\n    /**\n     * Resets the styles for the bounding box so that a new positioning can be computed.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_resetBoundingBoxStyles\",\n    value: function _resetBoundingBoxStyles() {\n      extendStyles(\n      /** @type {?} */\n      this._boundingBox.style,\n      /** @type {?} */\n      {\n        top: '0',\n        left: '0',\n        right: '0',\n        bottom: '0',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: ''\n      });\n    }\n    /**\n     * Resets the styles for the overlay pane so that a new positioning can be computed.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_resetOverlayElementStyles\",\n    value: function _resetOverlayElementStyles() {\n      extendStyles(this._pane.style,\n      /** @type {?} */\n      {\n        top: '',\n        left: '',\n        bottom: '',\n        right: '',\n        position: '',\n        transform: ''\n      });\n    }\n    /**\n     * Sets positioning styles to the overlay element.\n     * @private\n     * @param {?} originPoint\n     * @param {?} position\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setOverlayElementStyles\",\n    value: function _setOverlayElementStyles(originPoint, position) {\n      /** @type {?} */\n      var styles =\n      /** @type {?} */\n      {};\n\n      if (this._hasExactPosition()) {\n        /** @type {?} */\n        var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n        extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n        extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n      } else {\n        styles.position = 'static';\n      } // Use a transform to apply the offsets. We do this because the `center` positions rely on\n      // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n      // off the position. We also can't use margins, because they won't have an effect in some\n      // cases where the element doesn't have anything to \"push off of\". Finally, this works\n      // better both with flexible and non-flexible positioning.\n\n      /** @type {?} */\n\n\n      var transformString = '';\n      /** @type {?} */\n\n      var offsetX = this._getOffset(position, 'x');\n      /** @type {?} */\n\n\n      var offsetY = this._getOffset(position, 'y');\n\n      if (offsetX) {\n        transformString += \"translateX(\".concat(offsetX, \"px) \");\n      }\n\n      if (offsetY) {\n        transformString += \"translateY(\".concat(offsetY, \"px)\");\n      }\n\n      styles.transform = transformString.trim(); // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n      // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n      // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n\n      if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n        styles.maxHeight = '';\n      }\n\n      if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n        styles.maxWidth = '';\n      }\n\n      extendStyles(this._pane.style, styles);\n    }\n    /**\n     * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\n     * @private\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getExactOverlayY\",\n    value: function _getExactOverlayY(position, originPoint, scrollPosition) {\n      // Reset any existing styles. This is necessary in case the\n      // preferred position has changed since the last `apply`.\n\n      /** @type {?} */\n      var styles =\n      /** @type {?} */\n      {\n        top: null,\n        bottom: null\n      };\n      /** @type {?} */\n\n      var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n      if (this._isPushed) {\n        overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n      }\n      /** @type {?} */\n\n\n      var virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top; // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n      // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n      // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n      // otherwise our positioning will be thrown off.\n\n\n      overlayPoint.y -= virtualKeyboardOffset; // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n      // above or below the origin and the direction in which the element will expand.\n\n      if (position.overlayY === 'bottom') {\n        // When using `bottom`, we adjust the y position such that it is the distance\n        // from the bottom of the viewport rather than the top.\n\n        /** @type {?} */\n        var documentHeight =\n        /** @type {?} */\n        this._document.documentElement.clientHeight;\n        styles.bottom = \"\".concat(documentHeight - (overlayPoint.y + this._overlayRect.height), \"px\");\n      } else {\n        styles.top = coerceCssPixelValue(overlayPoint.y);\n      }\n\n      return styles;\n    }\n    /**\n     * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\n     * @private\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getExactOverlayX\",\n    value: function _getExactOverlayX(position, originPoint, scrollPosition) {\n      // Reset any existing styles. This is necessary in case the preferred position has\n      // changed since the last `apply`.\n\n      /** @type {?} */\n      var styles =\n      /** @type {?} */\n      {\n        left: null,\n        right: null\n      };\n      /** @type {?} */\n\n      var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n      if (this._isPushed) {\n        overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n      } // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n      // or \"after\" the origin, which determines the direction in which the element will expand.\n      // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n      // page is in RTL or LTR.\n\n      /** @type {?} */\n\n\n      var horizontalStyleProperty;\n\n      if (this._isRtl()) {\n        horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n      } else {\n        horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n      } // When we're setting `right`, we adjust the x position such that it is the distance\n      // from the right edge of the viewport rather than the left edge.\n\n\n      if (horizontalStyleProperty === 'right') {\n        /** @type {?} */\n        var documentWidth =\n        /** @type {?} */\n        this._document.documentElement.clientWidth;\n        styles.right = \"\".concat(documentWidth - (overlayPoint.x + this._overlayRect.width), \"px\");\n      } else {\n        styles.left = coerceCssPixelValue(overlayPoint.x);\n      }\n\n      return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getScrollVisibility\",\n    value: function _getScrollVisibility() {\n      // Note: needs fresh rects since the position could've changed.\n\n      /** @type {?} */\n      var originBounds = this._getOriginRect();\n      /** @type {?} */\n\n\n      var overlayBounds = this._pane.getBoundingClientRect(); // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n      // every time, we should be able to use the scrollTop of the containers if the size of those\n      // containers hasn't changed.\n\n      /** @type {?} */\n\n\n      var scrollContainerBounds = this._scrollables.map(\n      /**\n      * @param {?} scrollable\n      * @return {?}\n      */\n      function (scrollable) {\n        return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n      });\n\n      return {\n        isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n        isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n        isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n        isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds)\n      };\n    }\n    /**\n     * Subtracts the amount that an element is overflowing on an axis from its length.\n     * @private\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n\n  }, {\n    key: \"_subtractOverflows\",\n    value: function _subtractOverflows(length) {\n      for (var _len = arguments.length, overflows = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        overflows[_key - 1] = arguments[_key];\n      }\n\n      return overflows.reduce(\n      /**\n      * @param {?} currentValue\n      * @param {?} currentOverflow\n      * @return {?}\n      */\n      function (currentValue, currentOverflow) {\n        return currentValue - Math.max(currentOverflow, 0);\n      }, length);\n    }\n    /**\n     * Narrows the given viewport rect by the current _viewportMargin.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getNarrowedViewportRect\",\n    value: function _getNarrowedViewportRect() {\n      // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n      // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n      // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n      // and `innerHeight` that do. This is necessary, because the overlay container uses\n      // 100% `width` and `height` which don't include the scrollbar either.\n\n      /** @type {?} */\n      var width =\n      /** @type {?} */\n      this._document.documentElement.clientWidth;\n      /** @type {?} */\n\n      var height =\n      /** @type {?} */\n      this._document.documentElement.clientHeight;\n      /** @type {?} */\n\n      var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      return {\n        top: scrollPosition.top + this._viewportMargin,\n        left: scrollPosition.left + this._viewportMargin,\n        right: scrollPosition.left + width - this._viewportMargin,\n        bottom: scrollPosition.top + height - this._viewportMargin,\n        width: width - 2 * this._viewportMargin,\n        height: height - 2 * this._viewportMargin\n      };\n    }\n    /**\n     * Whether the we're dealing with an RTL context\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRtl\",\n    value: function _isRtl() {\n      return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Determines whether the overlay uses exact or flexible positioning.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_hasExactPosition\",\n    value: function _hasExactPosition() {\n      return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /**\n     * Retrieves the offset of a position along the x or y axis.\n     * @private\n     * @param {?} position\n     * @param {?} axis\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOffset\",\n    value: function _getOffset(position, axis) {\n      if (axis === 'x') {\n        // We don't do something like `position['offset' + axis]` in\n        // order to avoid breking minifiers that rename properties.\n        return position.offsetX == null ? this._offsetX : position.offsetX;\n      }\n\n      return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /**\n     * Validates that the current position match the expected values.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_validatePositions\",\n    value: function _validatePositions() {\n      if (!this._preferredPositions.length) {\n        throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n      } // TODO(crisbeto): remove these once Angular's template type\n      // checking is advanced enough to catch these cases.\n\n\n      this._preferredPositions.forEach(\n      /**\n      * @param {?} pair\n      * @return {?}\n      */\n      function (pair) {\n        validateHorizontalPosition('originX', pair.originX);\n        validateVerticalPosition('originY', pair.originY);\n        validateHorizontalPosition('overlayX', pair.overlayX);\n        validateVerticalPosition('overlayY', pair.overlayY);\n      });\n    }\n    /**\n     * Adds a single CSS class or an array of classes on the overlay panel.\n     * @private\n     * @param {?} cssClasses\n     * @return {?}\n     */\n\n  }, {\n    key: \"_addPanelClasses\",\n    value: function _addPanelClasses(cssClasses) {\n      var _this12 = this;\n\n      if (this._pane) {\n        coerceArray(cssClasses).forEach(\n        /**\n        * @param {?} cssClass\n        * @return {?}\n        */\n        function (cssClass) {\n          if (cssClass !== '' && _this12._appliedPanelClasses.indexOf(cssClass) === -1) {\n            _this12._appliedPanelClasses.push(cssClass);\n\n            _this12._pane.classList.add(cssClass);\n          }\n        });\n      }\n    }\n    /**\n     * Clears the classes that the position strategy has applied from the overlay panel.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_clearPanelClasses\",\n    value: function _clearPanelClasses() {\n      var _this13 = this;\n\n      if (this._pane) {\n        this._appliedPanelClasses.forEach(\n        /**\n        * @param {?} cssClass\n        * @return {?}\n        */\n        function (cssClass) {\n          _this13._pane.classList.remove(cssClass);\n        });\n\n        this._appliedPanelClasses = [];\n      }\n    }\n    /**\n     * Returns the ClientRect of the current origin.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOriginRect\",\n    value: function _getOriginRect() {\n      /** @type {?} */\n      var origin = this._origin;\n\n      if (origin instanceof ElementRef) {\n        return origin.nativeElement.getBoundingClientRect();\n      }\n\n      if (origin instanceof HTMLElement) {\n        return origin.getBoundingClientRect();\n      }\n      /** @type {?} */\n\n\n      var width = origin.width || 0;\n      /** @type {?} */\n\n      var height = origin.height || 0; // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n\n      return {\n        top: origin.y,\n        bottom: origin.y + height,\n        left: origin.x,\n        right: origin.x + width,\n        height: height,\n        width: width\n      };\n    }\n  }, {\n    key: \"positions\",\n    get: function get() {\n      return this._preferredPositions;\n    }\n  }]);\n\n  return FlexibleConnectedPositionStrategy;\n}();\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\n\n\nfunction extendStyles(dest, source) {\n  for (var key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key] = source[key];\n    }\n  }\n\n  return dest;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * \\@breaking-change 8.0.0\n */\n\n\nvar ConnectedPositionStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?} originPos\n   * @param {?} overlayPos\n   * @param {?} connectedTo\n   * @param {?} viewportRuler\n   * @param {?} document\n   * @param {?} platform\n   * @param {?} overlayContainer\n   */\n  function ConnectedPositionStrategy(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n    _classCallCheck(this, ConnectedPositionStrategy);\n\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     */\n    this._preferredPositions = []; // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n    // the extra logic, we create an instance of the positioning strategy that has some\n    // defaults that make it behave as the old position strategy and to which we'll\n    // proxy all of the API calls.\n\n    this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer).withFlexibleDimensions(false).withPush(false).withViewportMargin(0);\n    this.withFallbackPosition(originPos, overlayPos);\n  }\n  /**\n   * Whether the we're dealing with an RTL context\n   * @return {?}\n   */\n\n\n  _createClass(ConnectedPositionStrategy, [{\n    key: \"attach\",\n\n    /**\n     * Attach this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    value: function attach(overlayRef) {\n      this._overlayRef = overlayRef;\n\n      this._positionStrategy.attach(overlayRef);\n\n      if (this._direction) {\n        overlayRef.setDirection(this._direction);\n        this._direction = null;\n      }\n    }\n    /**\n     * Disposes all resources used by the position strategy.\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._positionStrategy.dispose();\n    }\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"apply\",\n    value: function apply() {\n      this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"recalculateLastPosition\",\n    value: function recalculateLastPosition() {\n      this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n\n  }, {\n    key: \"withScrollableContainers\",\n    value: function withScrollableContainers(scrollables) {\n      this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withFallbackPosition\",\n    value: function withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n      /** @type {?} */\n      var position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n\n      /** @type {?} */\n      this._preferredPositions.push(position);\n\n      /** @type {?} */\n      this._positionStrategy.withPositions(\n      /** @type {?} */\n      this._preferredPositions);\n\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} dir New layout direction.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withDirection\",\n    value: function withDirection(dir) {\n      // Since the direction might be declared before the strategy is attached,\n      // we save the value in a temporary property and we'll transfer it to the\n      // overlay ref on attachment.\n      if (\n      /** @type {?} */\n      this._overlayRef) {\n        /** @type {?} */\n        this._overlayRef.setDirection(dir);\n      } else {\n        /** @type {?} */\n        this._direction = dir;\n      }\n\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the X axis.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withOffsetX\",\n    value: function withOffsetX(offset) {\n      /** @type {?} */\n      this._positionStrategy.withDefaultOffsetX(offset);\n\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the Y axis.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withOffsetY\",\n    value: function withOffsetY(offset) {\n      /** @type {?} */\n      this._positionStrategy.withDefaultOffsetY(offset);\n\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @template THIS\n     * @this {THIS}\n     * @param {?} isLocked Whether the overlay should locked in.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withLockedPosition\",\n    value: function withLockedPosition(isLocked) {\n      /** @type {?} */\n      this._positionStrategy.withLockedPosition(isLocked);\n\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} positions Position pairs to be set on the strategy.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withPositions\",\n    value: function withPositions(positions) {\n      /** @type {?} */\n      this._preferredPositions = positions.slice();\n\n      /** @type {?} */\n      this._positionStrategy.withPositions(\n      /** @type {?} */\n      this._preferredPositions);\n\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} origin Reference to the new origin element.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"setOrigin\",\n    value: function setOrigin(origin) {\n      /** @type {?} */\n      this._positionStrategy.setOrigin(origin);\n\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n  }, {\n    key: \"_isRtl\",\n    get: function get() {\n      return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Emits an event when the connection point changes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"onPositionChange\",\n    get: function get() {\n      return this._positionStrategy.positionChanges;\n    }\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @return {?}\n     */\n\n  }, {\n    key: \"positions\",\n    get: function get() {\n      return this._preferredPositions;\n    }\n  }]);\n\n  return ConnectedPositionStrategy;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Class to be added to the overlay pane wrapper.\n * @type {?}\n */\n\n\nvar wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\n\nvar GlobalPositionStrategy = /*#__PURE__*/function () {\n  function GlobalPositionStrategy() {\n    _classCallCheck(this, GlobalPositionStrategy);\n\n    this._cssPosition = 'static';\n    this._topOffset = '';\n    this._bottomOffset = '';\n    this._leftOffset = '';\n    this._rightOffset = '';\n    this._alignItems = '';\n    this._justifyContent = '';\n    this._width = '';\n    this._height = '';\n  }\n  /**\n   * @param {?} overlayRef\n   * @return {?}\n   */\n\n\n  _createClass(GlobalPositionStrategy, [{\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      /** @type {?} */\n      var config = overlayRef.getConfig();\n      this._overlayRef = overlayRef;\n\n      if (this._width && !config.width) {\n        overlayRef.updateSize({\n          width: this._width\n        });\n      }\n\n      if (this._height && !config.height) {\n        overlayRef.updateSize({\n          height: this._height\n        });\n      }\n\n      overlayRef.hostElement.classList.add(wrapperClass);\n      this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New top offset.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"top\",\n    value: function top() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      /** @type {?} */\n      this._bottomOffset = '';\n\n      /** @type {?} */\n      this._topOffset = value;\n\n      /** @type {?} */\n      this._alignItems = 'flex-start';\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New left offset.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"left\",\n    value: function left() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      /** @type {?} */\n      this._rightOffset = '';\n\n      /** @type {?} */\n      this._leftOffset = value;\n\n      /** @type {?} */\n      this._justifyContent = 'flex-start';\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New bottom offset.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"bottom\",\n    value: function bottom() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      /** @type {?} */\n      this._topOffset = '';\n\n      /** @type {?} */\n      this._bottomOffset = value;\n\n      /** @type {?} */\n      this._alignItems = 'flex-end';\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New right offset.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"right\",\n    value: function right() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      /** @type {?} */\n      this._leftOffset = '';\n\n      /** @type {?} */\n      this._rightOffset = value;\n\n      /** @type {?} */\n      this._justifyContent = 'flex-end';\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New width for the overlay\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"width\",\n    value: function width() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      if (\n      /** @type {?} */\n      this._overlayRef) {\n        /** @type {?} */\n        this._overlayRef.updateSize({\n          width: value\n        });\n      } else {\n        /** @type {?} */\n        this._width = value;\n      }\n\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New height for the overlay\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"height\",\n    value: function height() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      if (\n      /** @type {?} */\n      this._overlayRef) {\n        /** @type {?} */\n        this._overlayRef.updateSize({\n          height: value\n        });\n      } else {\n        /** @type {?} */\n        this._height = value;\n      }\n\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"centerHorizontally\",\n    value: function centerHorizontally() {\n      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      /** @type {?} */\n      this.left(offset);\n\n      /** @type {?} */\n      this._justifyContent = 'center';\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"centerVertically\",\n    value: function centerVertically() {\n      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      /** @type {?} */\n      this.top(offset);\n\n      /** @type {?} */\n      this._alignItems = 'center';\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Apply the position to the element.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"apply\",\n    value: function apply() {\n      // Since the overlay ref applies the strategy asynchronously, it could\n      // have been disposed before it ends up being applied. If that is the\n      // case, we shouldn't do anything.\n      if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var styles = this._overlayRef.overlayElement.style;\n      /** @type {?} */\n\n      var parentStyles = this._overlayRef.hostElement.style;\n      /** @type {?} */\n\n      var config = this._overlayRef.getConfig();\n\n      styles.position = this._cssPosition;\n      styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n      styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n      styles.marginBottom = this._bottomOffset;\n      styles.marginRight = this._rightOffset;\n\n      if (config.width === '100%') {\n        parentStyles.justifyContent = 'flex-start';\n      } else if (this._justifyContent === 'center') {\n        parentStyles.justifyContent = 'center';\n      } else if (this._overlayRef.getConfig().direction === 'rtl') {\n        // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n        // don't want that because our positioning is explicitly `left` and `right`, hence\n        // why we do another inversion to ensure that the overlay stays in the same position.\n        // TODO: reconsider this if we add `start` and `end` methods.\n        if (this._justifyContent === 'flex-start') {\n          parentStyles.justifyContent = 'flex-end';\n        } else if (this._justifyContent === 'flex-end') {\n          parentStyles.justifyContent = 'flex-start';\n        }\n      } else {\n        parentStyles.justifyContent = this._justifyContent;\n      }\n\n      parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this._isDisposed || !this._overlayRef) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var styles = this._overlayRef.overlayElement.style;\n      /** @type {?} */\n\n      var parent = this._overlayRef.hostElement;\n      /** @type {?} */\n\n      var parentStyles = parent.style;\n      parent.classList.remove(wrapperClass);\n      parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop = styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n      this._overlayRef =\n      /** @type {?} */\n      null;\n      this._isDisposed = true;\n    }\n  }]);\n\n  return GlobalPositionStrategy;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Builder for overlay position strategy.\n */\n\n\nvar OverlayPositionBuilder = /*#__PURE__*/function () {\n  /**\n   * @param {?} _viewportRuler\n   * @param {?} _document\n   * @param {?} _platform\n   * @param {?} _overlayContainer\n   */\n  function OverlayPositionBuilder(_viewportRuler, _document, _platform, _overlayContainer) {\n    _classCallCheck(this, OverlayPositionBuilder);\n\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n  }\n  /**\n   * Creates a global position strategy.\n   * @return {?}\n   */\n\n\n  _createClass(OverlayPositionBuilder, [{\n    key: \"global\",\n    value: function global() {\n      return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n\n  }, {\n    key: \"connectedTo\",\n    value: function connectedTo(elementRef, originPos, overlayPos) {\n      return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param {?} origin Origin relative to which to position the overlay.\n     * @return {?}\n     */\n\n  }, {\n    key: \"flexibleConnectedTo\",\n    value: function flexibleConnectedTo(origin) {\n      return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n  }]);\n\n  return OverlayPositionBuilder;\n}();\n\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) {\n  return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform), ɵngcc0.ɵɵinject(OverlayContainer));\n};\n\nOverlayPositionBuilder.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: OverlayPositionBuilder,\n  factory: OverlayPositionBuilder.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nOverlayPositionBuilder.ctorParameters = function () {\n  return [{\n    type: ViewportRuler\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: Platform\n  }, {\n    type: OverlayContainer\n  }];\n};\n/** @nocollapse */\n\n\nOverlayPositionBuilder.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function OverlayPositionBuilder_Factory() {\n    return new OverlayPositionBuilder(ɵɵinject(ViewportRuler), ɵɵinject(DOCUMENT), ɵɵinject(Platform), ɵɵinject(OverlayContainer));\n  },\n  token: OverlayPositionBuilder,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform\n    }, {\n      type: OverlayContainer\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Next overlay unique ID.\n * @type {?}\n */\n\n\nvar nextUniqueId = 0; // Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\n// it needs is different based on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n\nvar Overlay = /*#__PURE__*/function () {\n  /**\n   * @param {?} scrollStrategies\n   * @param {?} _overlayContainer\n   * @param {?} _componentFactoryResolver\n   * @param {?} _positionBuilder\n   * @param {?} _keyboardDispatcher\n   * @param {?} _injector\n   * @param {?} _ngZone\n   * @param {?} _document\n   * @param {?} _directionality\n   * @param {?=} _location\n   */\n  function Overlay(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location) {\n    _classCallCheck(this, Overlay);\n\n    this.scrollStrategies = scrollStrategies;\n    this._overlayContainer = _overlayContainer;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._positionBuilder = _positionBuilder;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._injector = _injector;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._directionality = _directionality;\n    this._location = _location;\n  }\n  /**\n   * Creates an overlay.\n   * @param {?=} config Configuration applied to the overlay.\n   * @return {?} Reference to the created overlay.\n   */\n\n\n  _createClass(Overlay, [{\n    key: \"create\",\n    value: function create(config) {\n      /** @type {?} */\n      var host = this._createHostElement();\n      /** @type {?} */\n\n\n      var pane = this._createPaneElement(host);\n      /** @type {?} */\n\n\n      var portalOutlet = this._createPortalOutlet(pane);\n      /** @type {?} */\n\n\n      var overlayConfig = new OverlayConfig(config);\n      overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n      return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?} An overlay position builder.\n     */\n\n  }, {\n    key: \"position\",\n    value: function position() {\n      return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @private\n     * @param {?} host\n     * @return {?} Newly-created pane element\n     */\n\n  }, {\n    key: \"_createPaneElement\",\n    value: function _createPaneElement(host) {\n      /** @type {?} */\n      var pane = this._document.createElement('div');\n\n      pane.id = \"cdk-overlay-\".concat(nextUniqueId++);\n      pane.classList.add('cdk-overlay-pane');\n      host.appendChild(pane);\n      return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @private\n     * @return {?} Newly-create host element.\n     */\n\n  }, {\n    key: \"_createHostElement\",\n    value: function _createHostElement() {\n      /** @type {?} */\n      var host = this._document.createElement('div');\n\n      this._overlayContainer.getContainerElement().appendChild(host);\n\n      return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @private\n     * @param {?} pane The DOM element to turn into a portal outlet.\n     * @return {?} A portal outlet for the given DOM element.\n     */\n\n  }, {\n    key: \"_createPortalOutlet\",\n    value: function _createPortalOutlet(pane) {\n      // We have to resolve the ApplicationRef later in order to allow people\n      // to use overlay-based providers during app initialization.\n      if (!this._appRef) {\n        this._appRef = this._injector.get(ApplicationRef);\n      }\n\n      return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n    }\n  }]);\n\n  return Overlay;\n}();\n\nOverlay.ɵfac = function Overlay_Factory(t) {\n  return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8));\n};\n\nOverlay.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: Overlay,\n  factory: Overlay.ɵfac\n});\n/** @nocollapse */\n\nOverlay.ctorParameters = function () {\n  return [{\n    type: ScrollStrategyOptions\n  }, {\n    type: OverlayContainer\n  }, {\n    type: ComponentFactoryResolver\n  }, {\n    type: OverlayPositionBuilder\n  }, {\n    type: OverlayKeyboardDispatcher\n  }, {\n    type: Injector\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: Directionality\n  }, {\n    type: Location,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Overlay, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ScrollStrategyOptions\n    }, {\n      type: OverlayContainer\n    }, {\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: OverlayPositionBuilder\n    }, {\n      type: OverlayKeyboardDispatcher\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc3.Directionality\n    }, {\n      type: ɵngcc4.Location,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n * @type {?}\n */\n\n\nvar defaultPositionList = [{\n  originX: 'start',\n  originY: 'bottom',\n  overlayX: 'start',\n  overlayY: 'top'\n}, {\n  originX: 'start',\n  originY: 'top',\n  overlayX: 'start',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'top',\n  overlayX: 'end',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'bottom',\n  overlayX: 'end',\n  overlayY: 'top'\n}];\n/**\n * Injection token that determines the scroll handling while the connected overlay is open.\n * @type {?}\n */\n\nvar CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n\nvar CdkOverlayOrigin =\n/**\n * @param {?} elementRef\n */\nfunction CdkOverlayOrigin(elementRef) {\n  _classCallCheck(this, CdkOverlayOrigin);\n\n  this.elementRef = elementRef;\n};\n\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) {\n  return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nCdkOverlayOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkOverlayOrigin,\n  selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]],\n  exportAs: [\"cdkOverlayOrigin\"]\n});\n/** @nocollapse */\n\nCdkOverlayOrigin.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n      exportAs: 'cdkOverlayOrigin'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n\n\nvar CdkConnectedOverlay = /*#__PURE__*/function () {\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n\n  /**\n   * @param {?} _overlay\n   * @param {?} templateRef\n   * @param {?} viewContainerRef\n   * @param {?} scrollStrategyFactory\n   * @param {?} _dir\n   */\n  function CdkConnectedOverlay(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n    _classCallCheck(this, CdkConnectedOverlay);\n\n    this._overlay = _overlay;\n    this._dir = _dir;\n    this._hasBackdrop = false;\n    this._lockPosition = false;\n    this._growAfterOpen = false;\n    this._flexibleDimensions = false;\n    this._push = false;\n    this._backdropSubscription = Subscription.EMPTY;\n    /**\n     * Margin between the overlay and the viewport edges.\n     */\n\n    this.viewportMargin = 0;\n    /**\n     * Whether the overlay is open.\n     */\n\n    this.open = false;\n    /**\n     * Event emitted when the backdrop is clicked.\n     */\n\n    this.backdropClick = new EventEmitter();\n    /**\n     * Event emitted when the position has changed.\n     */\n\n    this.positionChange = new EventEmitter();\n    /**\n     * Event emitted when the overlay has been attached.\n     */\n\n    this.attach = new EventEmitter();\n    /**\n     * Event emitted when the overlay has been detached.\n     */\n\n    this.detach = new EventEmitter();\n    /**\n     * Emits when there are keyboard events that are targeted at the overlay.\n     */\n\n    this.overlayKeydown = new EventEmitter();\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n  /**\n   * The offset in pixels for the overlay connection point on the x-axis\n   * @return {?}\n   */\n\n\n  _createClass(CdkConnectedOverlay, [{\n    key: \"ngOnDestroy\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngOnDestroy() {\n      if (this._overlayRef) {\n        this._overlayRef.dispose();\n      }\n\n      this._backdropSubscription.unsubscribe();\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (this._position) {\n        this._updatePositionStrategy(this._position);\n\n        this._overlayRef.updateSize({\n          width: this.width,\n          minWidth: this.minWidth,\n          height: this.height,\n          minHeight: this.minHeight\n        });\n\n        if (changes['origin'] && this.open) {\n          this._position.apply();\n        }\n      }\n\n      if (changes['open']) {\n        this.open ? this._attachOverlay() : this._detachOverlay();\n      }\n    }\n    /**\n     * Creates an overlay\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createOverlay\",\n    value: function _createOverlay() {\n      var _this14 = this;\n\n      if (!this.positions || !this.positions.length) {\n        this.positions = defaultPositionList;\n      }\n\n      this._overlayRef = this._overlay.create(this._buildConfig());\n\n      this._overlayRef.keydownEvents().subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      function (event) {\n        _this14.overlayKeydown.next(event);\n\n        if (event.keyCode === ESCAPE && !hasModifierKey(event)) {\n          event.preventDefault();\n\n          _this14._detachOverlay();\n        }\n      });\n    }\n    /**\n     * Builds the overlay config based on the directive's inputs\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_buildConfig\",\n    value: function _buildConfig() {\n      /** @type {?} */\n      var positionStrategy = this._position = this._createPositionStrategy();\n      /** @type {?} */\n\n\n      var overlayConfig = new OverlayConfig({\n        direction: this._dir,\n        positionStrategy: positionStrategy,\n        scrollStrategy: this.scrollStrategy,\n        hasBackdrop: this.hasBackdrop\n      });\n\n      if (this.width || this.width === 0) {\n        overlayConfig.width = this.width;\n      }\n\n      if (this.height || this.height === 0) {\n        overlayConfig.height = this.height;\n      }\n\n      if (this.minWidth || this.minWidth === 0) {\n        overlayConfig.minWidth = this.minWidth;\n      }\n\n      if (this.minHeight || this.minHeight === 0) {\n        overlayConfig.minHeight = this.minHeight;\n      }\n\n      if (this.backdropClass) {\n        overlayConfig.backdropClass = this.backdropClass;\n      }\n\n      if (this.panelClass) {\n        overlayConfig.panelClass = this.panelClass;\n      }\n\n      return overlayConfig;\n    }\n    /**\n     * Updates the state of a position strategy, based on the values of the directive inputs.\n     * @private\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updatePositionStrategy\",\n    value: function _updatePositionStrategy(positionStrategy) {\n      var _this15 = this;\n\n      /** @type {?} */\n      var positions = this.positions.map(\n      /**\n      * @param {?} currentPosition\n      * @return {?}\n      */\n      function (currentPosition) {\n        return {\n          originX: currentPosition.originX,\n          originY: currentPosition.originY,\n          overlayX: currentPosition.overlayX,\n          overlayY: currentPosition.overlayY,\n          offsetX: currentPosition.offsetX || _this15.offsetX,\n          offsetY: currentPosition.offsetY || _this15.offsetY,\n          panelClass: currentPosition.panelClass || undefined\n        };\n      });\n      return positionStrategy.setOrigin(this.origin.elementRef).withPositions(positions).withFlexibleDimensions(this.flexibleDimensions).withPush(this.push).withGrowAfterOpen(this.growAfterOpen).withViewportMargin(this.viewportMargin).withLockedPosition(this.lockPosition);\n    }\n    /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createPositionStrategy\",\n    value: function _createPositionStrategy() {\n      var _this16 = this;\n\n      /** @type {?} */\n      var strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n\n      this._updatePositionStrategy(strategy);\n\n      strategy.positionChanges.subscribe(\n      /**\n      * @param {?} p\n      * @return {?}\n      */\n      function (p) {\n        return _this16.positionChange.emit(p);\n      });\n      return strategy;\n    }\n    /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_attachOverlay\",\n    value: function _attachOverlay() {\n      var _this17 = this;\n\n      if (!this._overlayRef) {\n        this._createOverlay();\n      } else {\n        // Update the overlay size, in case the directive's inputs have changed\n        this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n      }\n\n      if (!this._overlayRef.hasAttached()) {\n        this._overlayRef.attach(this._templatePortal);\n\n        this.attach.emit();\n      }\n\n      if (this.hasBackdrop) {\n        this._backdropSubscription = this._overlayRef.backdropClick().subscribe(\n        /**\n        * @param {?} event\n        * @return {?}\n        */\n        function (event) {\n          _this17.backdropClick.emit(event);\n        });\n      } else {\n        this._backdropSubscription.unsubscribe();\n      }\n    }\n    /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_detachOverlay\",\n    value: function _detachOverlay() {\n      if (this._overlayRef) {\n        this._overlayRef.detach();\n\n        this.detach.emit();\n      }\n\n      this._backdropSubscription.unsubscribe();\n    }\n  }, {\n    key: \"offsetX\",\n    get: function get() {\n      return this._offsetX;\n    }\n    /**\n     * @param {?} offsetX\n     * @return {?}\n     */\n    ,\n    set: function set(offsetX) {\n      this._offsetX = offsetX;\n\n      if (this._position) {\n        this._updatePositionStrategy(this._position);\n      }\n    }\n    /**\n     * The offset in pixels for the overlay connection point on the y-axis\n     * @return {?}\n     */\n\n  }, {\n    key: \"offsetY\",\n    get: function get() {\n      return this._offsetY;\n    }\n    /**\n     * @param {?} offsetY\n     * @return {?}\n     */\n    ,\n    set: function set(offsetY) {\n      this._offsetY = offsetY;\n\n      if (this._position) {\n        this._updatePositionStrategy(this._position);\n      }\n    }\n    /**\n     * Whether or not the overlay should attach a backdrop.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasBackdrop\",\n    get: function get() {\n      return this._hasBackdrop;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether or not the overlay should be locked when scrolling.\n     * @return {?}\n     */\n\n  }, {\n    key: \"lockPosition\",\n    get: function get() {\n      return this._lockPosition;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._lockPosition = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the overlay's width and height can be constrained to fit within the viewport.\n     * @return {?}\n     */\n\n  }, {\n    key: \"flexibleDimensions\",\n    get: function get() {\n      return this._flexibleDimensions;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the overlay can grow after the initial open when flexible positioning is turned on.\n     * @return {?}\n     */\n\n  }, {\n    key: \"growAfterOpen\",\n    get: function get() {\n      return this._growAfterOpen;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @return {?}\n     */\n\n  }, {\n    key: \"push\",\n    get: function get() {\n      return this._push;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._push = coerceBooleanProperty(value);\n    }\n    /**\n     * The associated overlay reference.\n     * @return {?}\n     */\n\n  }, {\n    key: \"overlayRef\",\n    get: function get() {\n      return this._overlayRef;\n    }\n    /**\n     * The element's layout direction.\n     * @return {?}\n     */\n\n  }, {\n    key: \"dir\",\n    get: function get() {\n      return this._dir ? this._dir.value : 'ltr';\n    }\n  }]);\n\n  return CdkConnectedOverlay;\n}();\n\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) {\n  return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8));\n};\n\nCdkConnectedOverlay.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkConnectedOverlay,\n  selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]],\n  inputs: {\n    viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"],\n    open: [\"cdkConnectedOverlayOpen\", \"open\"],\n    scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"],\n    offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"],\n    offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"],\n    hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"],\n    lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"],\n    flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"],\n    growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"],\n    push: [\"cdkConnectedOverlayPush\", \"push\"],\n    positions: [\"cdkConnectedOverlayPositions\", \"positions\"],\n    origin: [\"cdkConnectedOverlayOrigin\", \"origin\"],\n    width: [\"cdkConnectedOverlayWidth\", \"width\"],\n    height: [\"cdkConnectedOverlayHeight\", \"height\"],\n    minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"],\n    minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"],\n    backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"],\n    panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"]\n  },\n  outputs: {\n    backdropClick: \"backdropClick\",\n    positionChange: \"positionChange\",\n    attach: \"attach\",\n    detach: \"detach\",\n    overlayKeydown: \"overlayKeydown\"\n  },\n  exportAs: [\"cdkConnectedOverlay\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nCdkConnectedOverlay.ctorParameters = function () {\n  return [{\n    type: Overlay\n  }, {\n    type: TemplateRef\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nCdkConnectedOverlay.propDecorators = {\n  origin: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOrigin']\n  }],\n  positions: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPositions']\n  }],\n  offsetX: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOffsetX']\n  }],\n  offsetY: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOffsetY']\n  }],\n  width: [{\n    type: Input,\n    args: ['cdkConnectedOverlayWidth']\n  }],\n  height: [{\n    type: Input,\n    args: ['cdkConnectedOverlayHeight']\n  }],\n  minWidth: [{\n    type: Input,\n    args: ['cdkConnectedOverlayMinWidth']\n  }],\n  minHeight: [{\n    type: Input,\n    args: ['cdkConnectedOverlayMinHeight']\n  }],\n  backdropClass: [{\n    type: Input,\n    args: ['cdkConnectedOverlayBackdropClass']\n  }],\n  panelClass: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPanelClass']\n  }],\n  viewportMargin: [{\n    type: Input,\n    args: ['cdkConnectedOverlayViewportMargin']\n  }],\n  scrollStrategy: [{\n    type: Input,\n    args: ['cdkConnectedOverlayScrollStrategy']\n  }],\n  open: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOpen']\n  }],\n  hasBackdrop: [{\n    type: Input,\n    args: ['cdkConnectedOverlayHasBackdrop']\n  }],\n  lockPosition: [{\n    type: Input,\n    args: ['cdkConnectedOverlayLockPosition']\n  }],\n  flexibleDimensions: [{\n    type: Input,\n    args: ['cdkConnectedOverlayFlexibleDimensions']\n  }],\n  growAfterOpen: [{\n    type: Input,\n    args: ['cdkConnectedOverlayGrowAfterOpen']\n  }],\n  push: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPush']\n  }],\n  backdropClick: [{\n    type: Output\n  }],\n  positionChange: [{\n    type: Output\n  }],\n  attach: [{\n    type: Output\n  }],\n  detach: [{\n    type: Output\n  }],\n  overlayKeydown: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n      exportAs: 'cdkConnectedOverlay'\n    }]\n  }], function () {\n    return [{\n      type: Overlay\n    }, {\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    viewportMargin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayViewportMargin']\n    }],\n    open: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOpen']\n    }],\n    backdropClick: [{\n      type: Output\n    }],\n    positionChange: [{\n      type: Output\n    }],\n    attach: [{\n      type: Output\n    }],\n    detach: [{\n      type: Output\n    }],\n    overlayKeydown: [{\n      type: Output\n    }],\n    scrollStrategy: [{\n      type: Input,\n      args: ['cdkConnectedOverlayScrollStrategy']\n    }],\n    offsetX: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetX']\n    }],\n    offsetY: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetY']\n    }],\n    hasBackdrop: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHasBackdrop']\n    }],\n    lockPosition: [{\n      type: Input,\n      args: ['cdkConnectedOverlayLockPosition']\n    }],\n    flexibleDimensions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayFlexibleDimensions']\n    }],\n    growAfterOpen: [{\n      type: Input,\n      args: ['cdkConnectedOverlayGrowAfterOpen']\n    }],\n    push: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPush']\n    }],\n    positions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPositions']\n    }],\n    origin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOrigin']\n    }],\n    width: [{\n      type: Input,\n      args: ['cdkConnectedOverlayWidth']\n    }],\n    height: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHeight']\n    }],\n    minWidth: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinWidth']\n    }],\n    minHeight: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinHeight']\n    }],\n    backdropClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayBackdropClass']\n    }],\n    panelClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPanelClass']\n    }]\n  });\n})();\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\n\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return (\n    /**\n    * @return {?}\n    */\n    function () {\n      return overlay.scrollStrategies.reposition();\n    }\n  );\n}\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nvar CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nvar OverlayModule = function OverlayModule() {\n  _classCallCheck(this, OverlayModule);\n};\n\nOverlayModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: OverlayModule\n});\nOverlayModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function OverlayModule_Factory(t) {\n    return new (t || OverlayModule)();\n  },\n  providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n  imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, {\n    declarations: function declarations() {\n      return [CdkConnectedOverlay, CdkOverlayOrigin];\n    },\n    imports: function imports() {\n      return [BidiModule, PortalModule, ScrollingModule];\n    },\n    exports: function exports() {\n      return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, PortalModule, ScrollingModule],\n      exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n      declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n      providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @deprecated Use `OverlayModule` instead.\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\n\n\nvar OVERLAY_PROVIDERS = [Overlay, OverlayPositionBuilder, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER, OVERLAY_CONTAINER_PROVIDER, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n\nvar FullscreenOverlayContainer = /*#__PURE__*/function (_OverlayContainer) {\n  _inherits(FullscreenOverlayContainer, _OverlayContainer);\n\n  var _super = _createSuper(FullscreenOverlayContainer);\n\n  /**\n   * @param {?} _document\n   */\n  function FullscreenOverlayContainer(_document) {\n    _classCallCheck(this, FullscreenOverlayContainer);\n\n    return _super.call(this, _document);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(FullscreenOverlayContainer, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      _get(_getPrototypeOf(FullscreenOverlayContainer.prototype), \"ngOnDestroy\", this).call(this);\n\n      if (this._fullScreenEventName && this._fullScreenListener) {\n        this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n      }\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createContainer\",\n    value: function _createContainer() {\n      var _this18 = this;\n\n      _get(_getPrototypeOf(FullscreenOverlayContainer.prototype), \"_createContainer\", this).call(this);\n\n      this._adjustParentForFullscreenChange();\n\n      this._addFullscreenChangeListener(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this18._adjustParentForFullscreenChange();\n      });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_adjustParentForFullscreenChange\",\n    value: function _adjustParentForFullscreenChange() {\n      if (!this._containerElement) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var fullscreenElement = this.getFullscreenElement();\n      /** @type {?} */\n\n      var parent = fullscreenElement || this._document.body;\n      parent.appendChild(this._containerElement);\n    }\n    /**\n     * @private\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"_addFullscreenChangeListener\",\n    value: function _addFullscreenChangeListener(fn) {\n      /** @type {?} */\n      var eventName = this._getEventName();\n\n      if (eventName) {\n        if (this._fullScreenListener) {\n          this._document.removeEventListener(eventName, this._fullScreenListener);\n        }\n\n        this._document.addEventListener(eventName, fn);\n\n        this._fullScreenListener = fn;\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getEventName\",\n    value: function _getEventName() {\n      if (!this._fullScreenEventName) {\n        /** @type {?} */\n        var _document =\n        /** @type {?} */\n        this._document;\n\n        if (_document.fullscreenEnabled) {\n          this._fullScreenEventName = 'fullscreenchange';\n        } else if (_document.webkitFullscreenEnabled) {\n          this._fullScreenEventName = 'webkitfullscreenchange';\n        } else if (_document.mozFullScreenEnabled) {\n          this._fullScreenEventName = 'mozfullscreenchange';\n        } else if (_document.msFullscreenEnabled) {\n          this._fullScreenEventName = 'MSFullscreenChange';\n        }\n      }\n\n      return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getFullscreenElement\",\n    value: function getFullscreenElement() {\n      /** @type {?} */\n      var _document =\n      /** @type {?} */\n      this._document;\n      return _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement || null;\n    }\n  }]);\n\n  return FullscreenOverlayContainer;\n}(OverlayContainer);\n\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) {\n  return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nFullscreenOverlayContainer.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: FullscreenOverlayContainer,\n  factory: FullscreenOverlayContainer.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nFullscreenOverlayContainer.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nFullscreenOverlayContainer.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function FullscreenOverlayContainer_Factory() {\n    return new FullscreenOverlayContainer(ɵɵinject(DOCUMENT));\n  },\n  token: FullscreenOverlayContainer,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { Overlay, OverlayContainer, CdkOverlayOrigin, CdkConnectedOverlay, FullscreenOverlayContainer, OverlayRef, OverlayKeyboardDispatcher, OverlayPositionBuilder, GlobalPositionStrategy, ConnectedPositionStrategy, FlexibleConnectedPositionStrategy, OverlayConfig, validateVerticalPosition, validateHorizontalPosition, ConnectionPositionPair, ScrollingVisibility, ConnectedOverlayPositionChange, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, OverlayModule, OVERLAY_PROVIDERS, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵg, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵf, OVERLAY_CONTAINER_PROVIDER as ɵb, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵc, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵe, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵd };","map":{"version":3,"sources":["../../../src/cdk/overlay/scroll/block-scroll-strategy.ts","../../../src/cdk/overlay/scroll/scroll-strategy.ts","../../../src/cdk/overlay/scroll/close-scroll-strategy.ts","../../../src/cdk/overlay/scroll/noop-scroll-strategy.ts","../../../src/cdk/overlay/position/scroll-clip.ts","../../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts","../../../src/cdk/overlay/scroll/scroll-strategy-options.ts","../../../src/cdk/overlay/overlay-config.ts","../../../src/cdk/overlay/position/connected-position.ts","../../../src/cdk/overlay/keyboard/overlay-keyboard-dispatcher.ts","../../../src/cdk/overlay/overlay-container.ts","../../../src/cdk/overlay/overlay-ref.ts","../../../src/cdk/overlay/position/flexible-connected-position-strategy.ts","../../../src/cdk/overlay/position/connected-position-strategy.ts","../../../src/cdk/overlay/position/global-position-strategy.ts","../../../src/cdk/overlay/position/overlay-position-builder.ts","../../../src/cdk/overlay/overlay.ts","../../../src/cdk/overlay/overlay-directives.ts","../../../src/cdk/overlay/overlay-module.ts","../../../src/cdk/overlay/fullscreen-overlay-container.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\n\n/**\n * Extended `CSSStyleDeclaration` that includes `scrollBehavior` which isn't part of the\n * built-in TS typings. Once it is, this declaration can be removed safely.\n * @docs-private\n */\ntype ScrollBehaviorCSSStyleDeclaration = CSSStyleDeclaration & {scrollBehavior: string};\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\n  private _previousHTMLStyles = {top: '', left: ''};\n  private _previousScrollPosition: { top: number, left: number };\n  private _isEnabled = false;\n  private _document: Document;\n\n  constructor(private _viewportRuler: ViewportRuler, document: any) {\n    this._document = document;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach() { }\n\n  /** Blocks page-level scroll while the attached overlay is open. */\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement!;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n\n  /** Unblocks page-level scroll while the attached overlay is open. */\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement!;\n      const body = this._document.body!;\n      const htmlStyle = html.style as ScrollBehaviorCSSStyleDeclaration;\n      const bodyStyle = body.style as ScrollBehaviorCSSStyleDeclaration;\n      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n\n      this._isEnabled = false;\n\n      htmlStyle.left = this._previousHTMLStyles.left;\n      htmlStyle.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n      bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n    }\n  }\n\n  private _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement!;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n    const viewport = this._viewportRuler.getViewportSize();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayReference} from '../overlay-reference';\n\n/**\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\n */\nexport interface ScrollStrategy {\n  /** Enable this scroll strategy (called when the attached overlay is attached to a portal). */\n  enable: () => void;\n\n  /** Disable this scroll strategy (called when the attached overlay is detached from a portal). */\n  disable: () => void;\n\n  /** Attaches this `ScrollStrategy` to an overlay. */\n  attach: (overlayRef: OverlayReference) => void;\n\n  /** Detaches the scroll strategy from the current overlay. */\n  detach?: () => void;\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nexport function getMatScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgZone} from '@angular/core';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {Subscription} from 'rxjs';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\n\n/**\n * Config options for the CloseScrollStrategy.\n */\nexport interface CloseScrollStrategyConfig {\n  /** Amount of pixels the user has to scroll before the overlay is closed. */\n  threshold?: number;\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n  private _initialScrollPosition: number;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _config?: CloseScrollStrategyConfig) {}\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables the closing of the attached overlay on scroll. */\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n\n    const stream = this._scrollDispatcher.scrolled(0);\n\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n\n  /** Disables the closing the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null!;\n  }\n\n  /** Detaches the overlay ref and disables the scroll strategy. */\n  private _detach = () => {\n    this.disable();\n\n    if (this._overlayRef.hasAttached()) {\n      this._ngZone.run(() => this._overlayRef.detach());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\n\n/** Scroll strategy that doesn't do anything. */\nexport class NoopScrollStrategy implements ScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  disable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  attach() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nexport function isElementScrolledOutsideView(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nexport function isElementClippedByScrolling(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  /** Time in milliseconds to throttle the scroll events. */\n  scrollThrottle?: number;\n\n  /** Whether to close the overlay once the user has scrolled away completely. */\n  autoClose?: boolean;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    private _config?: RepositionScrollStrategyConfig) { }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables repositioning of the attached overlay on scroll. */\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition();\n\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n          const {width, height} = this._viewportRuler.getViewportSize();\n\n          // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n          const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n\n  /** Disables repositioning of the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null!;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {CloseScrollStrategy, CloseScrollStrategyConfig} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollStrategyOptions {\n  private _document: Document;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /** Do nothing on scroll. */\n  noop = () => new NoopScrollStrategy();\n\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n  close = (config?: CloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher,\n      this._ngZone, this._viewportRuler, config)\n\n  /** Block scrolling. */\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n  reposition = (config?: RepositionScrollStrategyConfig) => new RepositionScrollStrategy(\n      this._scrollDispatcher, this._viewportRuler, this._ngZone, config)\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ScrollStrategy, NoopScrollStrategy} from './scroll/index';\n\n\n/** Initial configuration used when creating an overlay. */\nexport class OverlayConfig {\n  /** Strategy with which to position the overlay. */\n  positionStrategy?: PositionStrategy;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  scrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\n\n  /** Custom class to add to the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the overlay has a backdrop. */\n  hasBackdrop?: boolean = false;\n\n  /** Custom class to add to the backdrop */\n  backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\n\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n  width?: number | string;\n\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n  height?: number | string;\n\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxWidth?: number | string;\n\n  /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /**\n   * Direction of the text in the overlay panel. If a `Directionality` instance\n   * is passed in, the overlay will handle changes to its value automatically.\n   */\n  direction?: Direction | Directionality;\n\n  /**\n   * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  disposeOnNavigation?: boolean = false;\n\n  constructor(config?: OverlayConfig) {\n    if (config) {\n      const configKeys = Object.keys(config) as Array<keyof OverlayConfig>;\n      for (const key of configKeys) {\n        if (config[key] !== undefined) {\n          // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n          // as \"I don't know *which* key this is, so the only valid value is the intersection\n          // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n          // is not smart enough to see that the right-hand-side is actually an access of the same\n          // exact type with the same exact key, meaning that the value type must be identical.\n          // So we use `any` to work around this.\n          this[key] = config[key] as any;\n        }\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n\n/** The points of the origin element and the overlay element to connect. */\nexport class ConnectionPositionPair {\n  /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n  originX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n  originY: VerticalConnectionPos;\n  /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n  overlayX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n  overlayY: VerticalConnectionPos;\n\n  constructor(\n    origin: OriginConnectionPosition,\n    overlay: OverlayConnectionPosition,\n    /** Offset along the X axis. */\n    public offsetX?: number,\n    /** Offset along the Y axis. */\n    public offsetY?: number,\n    /** Class(es) to be applied to the panel while this position is active. */\n    public panelClass?: string | string[]) {\n\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nexport class ScrollingVisibility {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nexport class ConnectedOverlayPositionChange {\n  constructor(\n      /** The position used as a result of this change. */\n      public connectionPair: ConnectionPositionPair,\n      /** @docs-private */\n      @Optional() public scrollableViewProperties: ScrollingVisibility) {}\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"top\", \"bottom\" or \"center\".`);\n  }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"start\", \"end\" or \"center\".`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {OverlayRef} from '../overlay-ref';\n\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayKeyboardDispatcher implements OnDestroy {\n\n  /** Currently attached overlays in the order they were attached. */\n  _attachedOverlays: OverlayRef[] = [];\n\n  private _document: Document;\n  private _isAttached: boolean;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    this._detach();\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayRef): void {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef);\n\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      this._document.body.addEventListener('keydown', this._keydownListener);\n      this._isAttached = true;\n    }\n\n    this._attachedOverlays.push(overlayRef);\n  }\n\n  /** Remove an overlay from the list of attached overlay refs. */\n  remove(overlayRef: OverlayRef): void {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this._detach();\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  private _detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener);\n      this._isAttached = false;\n    }\n  }\n\n  /** Keyboard event listener that will be attached to the body. */\n  private _keydownListener = (event: KeyboardEvent) => {\n    const overlays = this._attachedOverlays;\n\n    for (let i = overlays.length - 1; i > -1; i--) {\n      // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n      // We want to target the most recent overlay, rather than trying to match where the event came\n      // from, because some components might open an overlay, but keep focus on a trigger element\n      // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n      // because we don't want overlays that don't handle keyboard events to block the ones below\n      // them that do.\n      if (overlays[i]._keydownEventSubscriptions > 0) {\n        overlays[i]._keydownEvents.next(event);\n        break;\n      }\n    }\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(\n    dispatcher: OverlayKeyboardDispatcher, _document: any) {\n  return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport const OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n  // If there is already an OverlayKeyboardDispatcher available, use that.\n  // Otherwise, provide a new one.\n  provide: OverlayKeyboardDispatcher,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n\n    // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n    // of the type expected by Angular\n    DOCUMENT as InjectionToken<any>\n  ],\n  useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\n\n\n/** Container inside which all overlays will render. */\n@Injectable({providedIn: 'root'})\nexport class OverlayContainer implements OnDestroy {\n  protected _containerElement: HTMLElement;\n  protected _document: Document;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    const containerClass = 'cdk-overlay-container';\n    const previousContainers = this._document.getElementsByClassName(containerClass);\n\n    // Remove any old containers. This can happen when transitioning from the server to the client.\n    for (let i = 0; i < previousContainers.length; i++) {\n      previousContainers[i].parentNode!.removeChild(previousContainers[i]);\n    }\n\n    const container = this._document.createElement('div');\n    container.classList.add(containerClass);\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer,\n  _document: any) {\n  return parentContainer || new OverlayContainer(_document);\n}\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport const OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayContainer],\n    DOCUMENT as InjectionToken<any> // We need to use the InjectionToken somewhere to keep TS happy\n  ],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ComponentPortal, Portal, PortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, EmbeddedViewRef, NgZone} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, merge, SubscriptionLike, Subscription, Observer} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\nimport {OverlayReference} from './overlay-reference';\nimport {PositionStrategy} from './position/position-strategy';\nimport {ScrollStrategy} from './scroll';\n\n\n/** An object where all of its properties cannot be written. */\nexport type ImmutableObject<T> = {\n  readonly [P in keyof T]: T[P];\n};\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalOutlet, OverlayReference {\n  private _backdropElement: HTMLElement | null = null;\n  private _backdropClick: Subject<MouseEvent> = new Subject();\n  private _attachments = new Subject<void>();\n  private _detachments = new Subject<void>();\n  private _positionStrategy: PositionStrategy | undefined;\n  private _scrollStrategy: ScrollStrategy | undefined;\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n  private _backdropClickHandler = (event: MouseEvent) => this._backdropClick.next(event);\n\n  /**\n   * Reference to the parent of the `_host` at the time it was detached. Used to restore\n   * the `_host` to its original position in the DOM when it gets re-attached.\n   */\n  private _previousHostParent: HTMLElement;\n\n  private _keydownEventsObservable: Observable<KeyboardEvent> =\n      new Observable((observer: Observer<KeyboardEvent>) => {\n        const subscription = this._keydownEvents.subscribe(observer);\n        this._keydownEventSubscriptions++;\n\n        return () => {\n          subscription.unsubscribe();\n          this._keydownEventSubscriptions--;\n        };\n      });\n\n  /** Stream of keydown events dispatched to this overlay. */\n  _keydownEvents = new Subject<KeyboardEvent>();\n\n  /** Amount of subscriptions to the keydown events. */\n  _keydownEventSubscriptions = 0;\n\n  constructor(\n      private _portalOutlet: PortalOutlet,\n      private _host: HTMLElement,\n      private _pane: HTMLElement,\n      private _config: ImmutableObject<OverlayConfig>,\n      private _ngZone: NgZone,\n      private _keyboardDispatcher: OverlayKeyboardDispatcher,\n      private _document: Document,\n      // @breaking-change 8.0.0 `_location` parameter to be made required.\n      private _location?: Location) {\n\n    if (_config.scrollStrategy) {\n      this._scrollStrategy = _config.scrollStrategy;\n      this._scrollStrategy.attach(this);\n    }\n\n    this._positionStrategy = _config.positionStrategy;\n  }\n\n  /** The overlay's HTML element */\n  get overlayElement(): HTMLElement {\n    return this._pane;\n  }\n\n  /** The overlay's backdrop HTML element. */\n  get backdropElement(): HTMLElement | null {\n    return this._backdropElement;\n  }\n\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n  get hostElement(): HTMLElement {\n    return this._host;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n  attach(portal: Portal<any>): any {\n    let attachResult = this._portalOutlet.attach(portal);\n\n    if (this._positionStrategy) {\n      this._positionStrategy.attach(this);\n    }\n\n    // Update the pane element with the given configuration.\n    if (!this._host.parentElement && this._previousHostParent) {\n      this._previousHostParent.appendChild(this._host);\n    }\n\n    this._updateStackingOrder();\n    this._updateElementSize();\n    this._updateElementDirection();\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.enable();\n    }\n\n    // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        // The overlay could've been detached before the zone has stabilized.\n        if (this.hasAttached()) {\n          this.updatePosition();\n        }\n      });\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    // Track this overlay by the keyboard dispatcher\n    this._keyboardDispatcher.add(this);\n\n    // @breaking-change 8.0.0 remove the null check for `_location`\n    // once the constructor parameter is made required.\n    if (this._config.disposeOnNavigation && this._location) {\n      this._locationChanges = this._location.subscribe(() => this.dispose());\n    }\n\n    return attachResult;\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n  detach(): any {\n    if (!this.hasAttached()) {\n      return;\n    }\n\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n\n    if (this._positionStrategy && this._positionStrategy.detach) {\n      this._positionStrategy.detach();\n    }\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.disable();\n    }\n\n    const detachmentResult = this._portalOutlet.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    // Remove this overlay from keyboard dispatcher tracking.\n    this._keyboardDispatcher.remove(this);\n\n    // Keeping the host element in DOM the can cause scroll jank, because it still gets\n    // rendered, even though it's transparent and unclickable which is why we remove it.\n    this._detachContentWhenStable();\n\n    // Stop listening for location changes.\n    this._locationChanges.unsubscribe();\n\n    return detachmentResult;\n  }\n\n  /** Cleans up the overlay from the DOM. */\n  dispose(): void {\n    const isAttached = this.hasAttached();\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._disposeScrollStrategy();\n    this.detachBackdrop();\n    this._locationChanges.unsubscribe();\n    this._keyboardDispatcher.remove(this);\n    this._portalOutlet.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._keydownEvents.complete();\n\n    if (this._host && this._host.parentNode) {\n      this._host.parentNode.removeChild(this._host);\n      this._host = null!;\n    }\n\n    this._previousHostParent = this._pane = null!;\n\n    if (isAttached) {\n      this._detachments.next();\n    }\n\n    this._detachments.complete();\n  }\n\n  /** Whether the overlay has attached content. */\n  hasAttached(): boolean {\n    return this._portalOutlet.hasAttached();\n  }\n\n  /** Gets an observable that emits when the backdrop has been clicked. */\n  backdropClick(): Observable<MouseEvent> {\n    return this._backdropClick.asObservable();\n  }\n\n  /** Gets an observable that emits when the overlay has been attached. */\n  attachments(): Observable<void> {\n    return this._attachments.asObservable();\n  }\n\n  /** Gets an observable that emits when the overlay has been detached. */\n  detachments(): Observable<void> {\n    return this._detachments.asObservable();\n  }\n\n  /** Gets an observable of keydown events targeted to this overlay. */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._keydownEventsObservable;\n  }\n\n  /** Gets the current overlay configuration, which is immutable. */\n  getConfig(): OverlayConfig {\n    return this._config;\n  }\n\n  /** Updates the position of the overlay based on the position strategy. */\n  updatePosition(): void {\n    if (this._positionStrategy) {\n      this._positionStrategy.apply();\n    }\n  }\n\n  /** Switches to a new position strategy and updates the overlay position. */\n  updatePositionStrategy(strategy: PositionStrategy): void {\n    if (strategy === this._positionStrategy) {\n      return;\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._positionStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      this.updatePosition();\n    }\n  }\n\n  /** Update the size properties of the overlay. */\n  updateSize(sizeConfig: OverlaySizeConfig): void {\n    this._config = {...this._config, ...sizeConfig};\n    this._updateElementSize();\n  }\n\n  /** Sets the LTR/RTL direction for the overlay. */\n  setDirection(dir: Direction | Directionality): void {\n    this._config = {...this._config, direction: dir};\n    this._updateElementDirection();\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): void {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, true);\n    }\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): void {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, false);\n    }\n  }\n\n  /**\n   * Returns the layout direction of the overlay panel.\n   */\n  getDirection(): Direction {\n    const direction = this._config.direction;\n\n    if (!direction) {\n      return 'ltr';\n    }\n\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n\n  /** Switches to a new scroll strategy. */\n  updateScrollStrategy(strategy: ScrollStrategy): void {\n    if (strategy === this._scrollStrategy) {\n      return;\n    }\n\n    this._disposeScrollStrategy();\n    this._scrollStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      strategy.enable();\n    }\n  }\n\n  /** Updates the text direction of the overlay panel. */\n  private _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n\n  /** Updates the size of the overlay element based on the overlay config. */\n  private _updateElementSize() {\n    if (!this._pane) {\n      return;\n    }\n\n    const style = this._pane.style;\n\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n\n  /** Toggles the pointer events for the overlay pane element. */\n  private _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n\n  /** Attaches a backdrop for this overlay. */\n  private _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n\n    this._backdropElement = this._document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n    }\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._host.parentElement!.insertBefore(this._backdropElement, this._host);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', this._backdropClickHandler);\n\n    // Add class to fade-in the backdrop after one frame.\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n  private _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode!.appendChild(this._host);\n    }\n  }\n\n  /** Detaches the backdrop (if any) associated with the overlay. */\n  detachBackdrop(): void {\n    let backdropToDetach = this._backdropElement;\n\n    if (!backdropToDetach) {\n      return;\n    }\n\n    let timeoutId: number;\n    let finishDetach = () => {\n      // It may not be attached to anything in certain cases (e.g. unit tests).\n      if (backdropToDetach) {\n        backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n        backdropToDetach.removeEventListener('transitionend', finishDetach);\n\n        if (backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n      }\n\n      // It is possible that a new portal has been attached to this overlay since we started\n      // removing the backdrop. If that is the case, only clear the backdrop reference if it\n      // is still the same instance that we started to remove.\n      if (this._backdropElement == backdropToDetach) {\n        this._backdropElement = null;\n      }\n\n      if (this._config.backdropClass) {\n        this._toggleClasses(backdropToDetach!, this._config.backdropClass, false);\n      }\n\n      clearTimeout(timeoutId);\n    };\n\n    backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n    this._ngZone.runOutsideAngular(() => {\n      backdropToDetach!.addEventListener('transitionend', finishDetach);\n    });\n\n    // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n    // In this case we make it unclickable and we try to remove it after a delay.\n    backdropToDetach.style.pointerEvents = 'none';\n\n    // Run this outside the Angular zone because there's nothing that Angular cares about.\n    // If it were to run inside the Angular zone, every test that used Overlay would have to be\n    // either async or fakeAsync.\n    timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n  }\n\n  /** Toggles a single CSS class or an array of classes on an element. */\n  private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\n    const classList = element.classList;\n\n    coerceArray(cssClasses).forEach(cssClass => {\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\n      // Also trying to add an empty string to a DOMTokenList will throw.\n      if (cssClass) {\n        isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n      }\n    });\n  }\n\n  /** Detaches the overlay content next time the zone stabilizes. */\n  private _detachContentWhenStable() {\n    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n    // be patched to run inside the zone, which will throw us into an infinite loop.\n    this._ngZone.runOutsideAngular(() => {\n      // We can't remove the host here immediately, because the overlay pane's content\n      // might still be animating. This stream helps us avoid interrupting the animation\n      // by waiting for the pane to become empty.\n      const subscription = this._ngZone.onStable\n        .asObservable()\n        .pipe(takeUntil(merge(this._attachments, this._detachments)))\n        .subscribe(() => {\n          // Needs a couple of checks for the pane and host, because\n          // they may have been removed by the time the zone stabilizes.\n          if (!this._pane || !this._host || this._pane.children.length === 0) {\n            if (this._pane && this._config.panelClass) {\n              this._toggleClasses(this._pane, this._config.panelClass, false);\n            }\n\n            if (this._host && this._host.parentElement) {\n              this._previousHostParent = this._host.parentElement;\n              this._previousHostParent.removeChild(this._host);\n            }\n\n            subscription.unsubscribe();\n          }\n        });\n    });\n  }\n\n  /** Disposes of a scroll strategy. */\n  private _disposeScrollStrategy() {\n    const scrollStrategy = this._scrollStrategy;\n\n    if (scrollStrategy) {\n      scrollStrategy.disable();\n\n      if (scrollStrategy.detach) {\n        scrollStrategy.detach();\n      }\n    }\n  }\n}\n\n\n/** Size properties for an overlay. */\nexport interface OverlaySizeConfig {\n  width?: number | string;\n  height?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxWidth?: number | string;\n  maxHeight?: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler, CdkScrollable, ViewportScrollPosition} from '@angular/cdk/scrolling';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  ScrollingVisibility,\n  validateHorizontalPosition,\n  validateVerticalPosition,\n} from './connected-position';\nimport {Observable, Subscription, Subject} from 'rxjs';\nimport {OverlayReference} from '../overlay-reference';\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayContainer} from '../overlay-container';\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n\n/** Possible values that can be set as the origin of a FlexibleConnectedPositionStrategy. */\nexport type FlexibleConnectedPositionStrategyOrigin = ElementRef | HTMLElement | Point & {\n  width?: number;\n  height?: number;\n};\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class FlexibleConnectedPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n\n  /** Whether we're performing the very first positioning of the overlay. */\n  private _isInitialRender: boolean;\n\n  /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n  private _lastBoundingBoxSize = {width: 0, height: 0};\n\n  /** Whether the overlay was pushed in a previous positioning. */\n  private _isPushed = false;\n\n  /** Whether the overlay can be pushed on-screen on the initial open. */\n  private _canPush = true;\n\n  /** Whether the overlay can grow via flexible width/height after the initial open. */\n  private _growAfterOpen = false;\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  private _hasFlexibleDimensions = true;\n\n  /** Whether the overlay position is locked. */\n  private _positionLocked = false;\n\n  /** Cached origin dimensions */\n  private _originRect: ClientRect;\n\n  /** Cached overlay dimensions */\n  private _overlayRect: ClientRect;\n\n  /** Cached viewport dimensions */\n  private _viewportRect: ClientRect;\n\n  /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n  private _viewportMargin = 0;\n\n  /** The Scrollable containers used to check scrollable view properties on position change. */\n  private _scrollables: CdkScrollable[] = [];\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** The origin element against which the overlay will be positioned. */\n  private _origin: FlexibleConnectedPositionStrategyOrigin;\n\n  /** The overlay pane element. */\n  private _pane: HTMLElement;\n\n  /** Whether the strategy has been disposed of already. */\n  private _isDisposed: boolean;\n\n  /**\n   * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n   * within the viewport.\n   */\n  private _boundingBox: HTMLElement | null;\n\n  /** The last position to have been calculated as the best fit position. */\n  private _lastPosition: ConnectedPosition | null;\n\n  /** Subject that emits whenever the position changes. */\n  private _positionChanges = new Subject<ConnectedOverlayPositionChange>();\n\n  /** Subscription to viewport size changes. */\n  private _resizeSubscription = Subscription.EMPTY;\n\n  /** Default offset for the overlay along the x axis. */\n  private _offsetX = 0;\n\n  /** Default offset for the overlay along the y axis. */\n  private _offsetY = 0;\n\n  /** Selector to be used when finding the elements on which to set the transform origin. */\n  private _transformOriginSelector: string;\n\n  /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n  private _appliedPanelClasses: string[] = [];\n\n  /** Amount by which the overlay was pushed in each axis during the last time it was positioned. */\n  private _previousPushAmount: {x: number, y: number} | null;\n\n  /** Observable sequence of position changes. */\n  positionChanges: Observable<ConnectedOverlayPositionChange> =\n      this._positionChanges.asObservable();\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions(): ConnectionPositionPair[] {\n    return this._preferredPositions;\n  }\n\n  constructor(\n      connectedTo: FlexibleConnectedPositionStrategyOrigin, private _viewportRuler: ViewportRuler,\n      private _document: Document, private _platform: Platform,\n      private _overlayContainer: OverlayContainer) {\n    this.setOrigin(connectedTo);\n  }\n\n  /** Attaches this position strategy to an overlay. */\n  attach(overlayRef: OverlayReference): void {\n    if (this._overlayRef && overlayRef !== this._overlayRef) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n\n    this._validatePositions();\n\n    overlayRef.hostElement.classList.add(boundingBoxClass);\n\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._isDisposed = false;\n    this._isInitialRender = true;\n    this._lastPosition = null;\n    this._resizeSubscription.unsubscribe();\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n      // When the window is resized, we want to trigger the next reposition as if it\n      // was an initial render, in order for the strategy to pick a new optimal position,\n      // otherwise position locking will cause it to stay at the old one.\n      this._isInitialRender = true;\n      this.apply();\n    });\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n  apply(): void {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    if (this._isDisposed || !this._platform.isBrowser) {\n      return;\n    }\n\n    // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n\n    this._clearPanelClasses();\n    this._resetOverlayElementStyles();\n    this._resetBoundingBoxStyles();\n\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._getOriginRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect;\n\n    // Positions where the overlay will fit with flexible dimensions.\n    const flexibleFits: FlexibleFit[] = [];\n\n    // Fallback if none of the preferred positions fit within the viewport.\n    let fallback: FallbackPosition | undefined;\n\n    // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, pos);\n\n      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n\n      // Calculate how well the overlay would fit into the viewport with this point.\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay, without any further work, fits into the viewport, use this position.\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n        this._applyPosition(pos, originPoint);\n        return;\n      }\n\n      // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n        });\n\n        continue;\n      }\n\n      // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\n      }\n    }\n\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n    if (flexibleFits.length) {\n      let bestFit: FlexibleFit | null = null;\n      let bestScore = -1;\n      for (const fit of flexibleFits) {\n        const score =\n            fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n\n      this._isPushed = false;\n      this._applyPosition(bestFit!.position, bestFit!.origin);\n      return;\n    }\n\n    // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n      this._applyPosition(fallback!.position, fallback!.originPoint);\n      return;\n    }\n\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n    this._applyPosition(fallback!.position, fallback!.originPoint);\n  }\n\n  detach(): void {\n    this._clearPanelClasses();\n    this._lastPosition = null;\n    this._previousPushAmount = null;\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /** Cleanup after the element gets destroyed. */\n  dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n\n    // We can't use `_resetBoundingBoxStyles` here, because it resets\n    // some properties to zero, rather than removing them.\n    if (this._boundingBox) {\n      extendStyles(this._boundingBox.style, {\n        top: '',\n        left: '',\n        right: '',\n        bottom: '',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: '',\n      } as CSSStyleDeclaration);\n    }\n\n    if (this._pane) {\n      this._resetOverlayElementStyles();\n    }\n\n    if (this._overlayRef) {\n      this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n    }\n\n    this.detach();\n    this._positionChanges.complete();\n    this._overlayRef = this._boundingBox = null!;\n    this._isDisposed = true;\n  }\n\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  reapplyLastPosition(): void {\n    if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n      this._originRect = this._getOriginRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n\n      const lastPosition = this._lastPosition || this._preferredPositions[0];\n      const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n      this._applyPosition(lastPosition, originPoint);\n    }\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]): this {\n    this._scrollables = scrollables;\n    return this;\n  }\n\n  /**\n   * Adds new preferred positions.\n   * @param positions List of positions options for this overlay.\n   */\n  withPositions(positions: ConnectedPosition[]): this {\n    this._preferredPositions = positions;\n\n    // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n    if (positions.indexOf(this._lastPosition!) === -1) {\n      this._lastPosition = null;\n    }\n\n    this._validatePositions();\n\n    return this;\n  }\n\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n  withViewportMargin(margin: number): this {\n    this._viewportMargin = margin;\n    return this;\n  }\n\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n  withFlexibleDimensions(flexibleDimensions = true): this {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n  withGrowAfterOpen(growAfterOpen = true): this {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  withPush(canPush = true): this {\n    this._canPush = canPush;\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked = true): this {\n    this._positionLocked = isLocked;\n    return this;\n  }\n\n  /**\n   * Sets the origin, relative to which to position the overlay.\n   * Using an element origin is useful for building components that need to be positioned\n   * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n   * used for cases like contextual menus which open relative to the user's pointer.\n   * @param origin Reference to the new origin.\n   */\n  setOrigin(origin: FlexibleConnectedPositionStrategyOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param offset New offset in the X axis.\n   */\n  withDefaultOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param offset New offset in the Y axis.\n   */\n  withDefaultOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @param selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   */\n  withTransformOriginOn(selector: string): this {\n    this._transformOriginSelector = selector;\n    return this;\n  }\n\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n  private _getOriginPoint(originRect: ClientRect, pos: ConnectedPosition): Point {\n    let x: number;\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + (originRect.width / 2);\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n\n    let y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n\n\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n  private _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      pos: ConnectedPosition): Point {\n\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n\n    let overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY,\n    };\n  }\n\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n  private _getOverlayFit(point: Point, overlay: ClientRect, viewport: ClientRect,\n    position: ConnectedPosition): OverlayFit {\n\n    let {x, y} = point;\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    // Account for the offsets since they could push the overlay out of the viewport.\n    if (offsetX) {\n      x += offsetX;\n    }\n\n    if (offsetY) {\n      y += offsetY;\n    }\n\n    // How much the overlay would overflow at this position, on each side.\n    let leftOverflow = 0 - x;\n    let rightOverflow = (x + overlay.width) - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = (y + overlay.height) - viewport.height;\n\n    // Visible parts of the element on each axis.\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n    let visibleArea = visibleWidth * visibleHeight;\n\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width,\n    };\n  }\n\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlat at some position.\n   * @param viewport The geometry of the viewport.\n   */\n  private _canFitWithFlexibleDimensions(fit: OverlayFit, point: Point, viewport: ClientRect) {\n    if (this._hasFlexibleDimensions) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = this._overlayRef.getConfig().minHeight;\n      const minWidth = this._overlayRef.getConfig().minWidth;\n\n      const verticalFit = fit.fitsInViewportVertically ||\n          (minHeight != null && minHeight <= availableHeight);\n      const horizontalFit = fit.fitsInViewportHorizontally ||\n          (minWidth != null && minWidth <= availableWidth);\n\n      return verticalFit && horizontalFit;\n    }\n    return false;\n  }\n\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n   * right and bottom).\n   *\n   * @param start Starting point from which the overlay is pushed.\n   * @param overlay Dimensions of the overlay.\n   * @param scrollPosition Current viewport scroll position.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n  private _pushOverlayOnScreen(start: Point,\n                               overlay: ClientRect,\n                               scrollPosition: ViewportScrollPosition): Point {\n    // If the position is locked and we've pushed the overlay already, reuse the previous push\n    // amount, rather than pushing it again. If we were to continue pushing, the element would\n    // remain in the viewport, which goes against the expectations when position locking is enabled.\n    if (this._previousPushAmount && this._positionLocked) {\n      return {\n        x: start.x + this._previousPushAmount.x,\n        y: start.y + this._previousPushAmount.y\n      };\n    }\n\n    const viewport = this._viewportRect;\n\n    // Determine how much the overlay goes outside the viewport on each\n    // side, which we'll use to decide which direction to push it.\n    const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n\n    // Amount by which to push the overlay in each axis such that it remains on-screen.\n    let pushX = 0;\n    let pushY = 0;\n\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n    if (overlay.width <= viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n    }\n\n    if (overlay.height <= viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n    }\n\n    this._previousPushAmount = {x: pushX, y: pushY};\n\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY,\n    };\n  }\n\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n  private _applyPosition(position: ConnectedPosition, originPoint: Point) {\n    this._setTransformOrigin(position);\n    this._setOverlayElementStyles(originPoint, position);\n    this._setBoundingBoxStyles(originPoint, position);\n\n    if (position.panelClass) {\n      this._addPanelClasses(position.panelClass);\n    }\n\n    // Save the last connected position in case the position needs to be re-calculated.\n    this._lastPosition = position;\n\n    // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculcations can be somewhat expensive.\n    if (this._positionChanges.observers.length) {\n      const scrollableViewProperties = this._getScrollVisibility();\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n      this._positionChanges.next(changeEvent);\n    }\n\n    this._isInitialRender = false;\n  }\n\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\n  private _setTransformOrigin(position: ConnectedPosition) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n\n    const elements: NodeListOf<HTMLElement> =\n        this._boundingBox!.querySelectorAll(this._transformOriginSelector);\n    let xOrigin: 'left' | 'right' | 'center';\n    let yOrigin: 'top' | 'bottom' | 'center' = position.overlayY;\n\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n  private _calculateBoundingBoxRect(origin: Point, position: ConnectedPosition): BoundingBoxRect {\n    const viewport = this._viewportRect;\n    const isRtl = this._isRtl();\n    let height: number, top: number, bottom: number;\n\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.height - top + this._viewportMargin;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay is vertically centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n      // `origin.y - viewport.top`.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n\n      const previousHeight = this._lastBoundingBoxSize.height;\n\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - (previousHeight / 2);\n      }\n    }\n\n    // The overlay is opening 'right-ward' (the content flows to the right).\n    const isBoundedByRightViewportEdge =\n        (position.overlayX === 'start' && !isRtl) ||\n        (position.overlayX === 'end' && isRtl);\n\n    // The overlay is opening 'left-ward' (the content flows to the left).\n    const isBoundedByLeftViewportEdge =\n        (position.overlayX === 'end' && !isRtl) ||\n        (position.overlayX === 'start' && isRtl);\n\n    let width: number, left: number, right: number;\n\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.width - origin.x + this._viewportMargin;\n      width = origin.x - this._viewportMargin;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay is horizontally centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.right - origin.x` and\n      // `origin.x - viewport.left`.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.right - origin.x + viewport.left, origin.x);\n      const previousWidth = this._lastBoundingBoxSize.width;\n\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - (previousWidth / 2);\n      }\n    }\n\n    return {top: top!, left: left!, bottom: bottom!, right: right!, width, height};\n  }\n\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stetches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n  private _setBoundingBoxStyles(origin: Point, position: ConnectedPosition): void {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = '';\n      styles.width = styles.height = '100%';\n    } else {\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right);\n\n      // Push the pane content towards the proper direction.\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n\n    this._lastBoundingBoxSize = boundingBoxRect;\n\n    extendStyles(this._boundingBox!.style, styles);\n  }\n\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n  private _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox!.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n  private _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n      transform: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Sets positioning styles to the overlay element. */\n  private _setOverlayElementStyles(originPoint: Point, position: ConnectedPosition): void {\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n    } else {\n      styles.position = 'static';\n    }\n\n    // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n    let transformString = '';\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n\n    styles.transform = transformString.trim();\n\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n      styles.maxHeight = '';\n    }\n\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n      styles.maxWidth = '';\n    }\n\n    extendStyles(this._pane.style, styles);\n  }\n\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayY(position: ConnectedPosition,\n                            originPoint: Point,\n                            scrollPosition: ViewportScrollPosition) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {top: null, bottom: null} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    let virtualKeyboardOffset =\n        this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n\n    // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n    // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n    overlayPoint.y -= virtualKeyboardOffset;\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement!.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n\n    return styles;\n  }\n\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayX(position: ConnectedPosition,\n                            originPoint: Point,\n                            scrollPosition: ViewportScrollPosition) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {left: null, right: null} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let horizontalStyleProperty: 'left' | 'right';\n\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement!.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n\n    return styles;\n  }\n\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n  private _getScrollVisibility(): ScrollingVisibility {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._getOriginRect();\n    const overlayBounds =  this._pane.getBoundingClientRect();\n\n    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n    const scrollContainerBounds = this._scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n\n  /** Subtracts the amount that an element is overflowing on an axis from its length. */\n  private _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n  private _getNarrowedViewportRect(): ClientRect {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement!.clientWidth;\n    const height = this._document.documentElement!.clientHeight;\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    return {\n      top:    scrollPosition.top + this._viewportMargin,\n      left:   scrollPosition.left + this._viewportMargin,\n      right:  scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width:  width  - (2 * this._viewportMargin),\n      height: height - (2 * this._viewportMargin),\n    };\n  }\n\n  /** Whether the we're dealing with an RTL context */\n  private _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Determines whether the overlay uses exact or flexible positioning. */\n  private _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n\n  /** Retrieves the offset of a position along the x or y axis. */\n  private _getOffset(position: ConnectedPosition, axis: 'x' | 'y') {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n\n  /** Validates that the current position match the expected values. */\n  private _validatePositions(): void {\n    if (!this._preferredPositions.length) {\n      throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n    }\n\n    // TODO(crisbeto): remove these once Angular's template type\n    // checking is advanced enough to catch these cases.\n    this._preferredPositions.forEach(pair => {\n      validateHorizontalPosition('originX', pair.originX);\n      validateVerticalPosition('originY', pair.originY);\n      validateHorizontalPosition('overlayX', pair.overlayX);\n      validateVerticalPosition('overlayY', pair.overlayY);\n    });\n  }\n\n  /** Adds a single CSS class or an array of classes on the overlay panel. */\n  private _addPanelClasses(cssClasses: string | string[]) {\n    if (this._pane) {\n      coerceArray(cssClasses).forEach(cssClass => {\n        if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n          this._appliedPanelClasses.push(cssClass);\n          this._pane.classList.add(cssClass);\n        }\n      });\n    }\n  }\n\n  /** Clears the classes that the position strategy has applied from the overlay panel. */\n  private _clearPanelClasses() {\n    if (this._pane) {\n      this._appliedPanelClasses.forEach(cssClass => {\n        this._pane.classList.remove(cssClass);\n      });\n      this._appliedPanelClasses = [];\n    }\n  }\n\n  /** Returns the ClientRect of the current origin. */\n  private _getOriginRect(): ClientRect {\n    const origin = this._origin;\n\n    if (origin instanceof ElementRef) {\n      return origin.nativeElement.getBoundingClientRect();\n    }\n\n    if (origin instanceof HTMLElement) {\n      return origin.getBoundingClientRect();\n    }\n\n    const width = origin.width || 0;\n    const height = origin.height || 0;\n\n    // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n    return {\n      top: origin.y,\n      bottom: origin.y + height,\n      left: origin.x,\n      right: origin.x + width,\n      height,\n      width\n    };\n  }\n}\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\ninterface OverlayFit {\n  /** Whether the overlay fits completely in the viewport. */\n  isCompletelyWithinViewport: boolean;\n\n  /** Whether the overlay fits in the viewport on the y-axis. */\n  fitsInViewportVertically: boolean;\n\n  /** Whether the overlay fits in the viewport on the x-axis. */\n  fitsInViewportHorizontally: boolean;\n\n  /** The total visible area (in px^2) of the overlay inside the viewport. */\n  visibleArea: number;\n}\n\n/** Record of the measurments determining whether an overlay will fit in a specific position. */\ninterface FallbackPosition {\n  position: ConnectedPosition;\n  originPoint: Point;\n  overlayPoint: Point;\n  overlayFit: OverlayFit;\n  overlayRect: ClientRect;\n}\n\n/** Position and size of the overlay sizing wrapper for a specific position. */\ninterface BoundingBoxRect {\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  height: number;\n  width: number;\n}\n\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\ninterface FlexibleFit {\n  position: ConnectedPosition;\n  origin: Point;\n  overlayRect: ClientRect;\n  boundingBoxRect: BoundingBoxRect;\n}\n\n/** A connected position as specified by the user. */\nexport interface ConnectedPosition {\n  originX: 'start' | 'center' | 'end';\n  originY: 'top' | 'center' | 'bottom';\n\n  overlayX: 'start' | 'center' | 'end';\n  overlayY: 'top' | 'center' | 'bottom';\n\n  weight?: number;\n  offsetX?: number;\n  offsetY?: number;\n  panelClass?: string | string[];\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(dest: CSSStyleDeclaration, source: CSSStyleDeclaration): CSSStyleDeclaration {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key] = source[key];\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ViewportRuler} from '@angular/cdk/scrolling';\nimport {ElementRef} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {OverlayContainer} from '../overlay-container';\nimport {OverlayReference} from '../overlay-reference';\n\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n} from './connected-position';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {PositionStrategy} from './position-strategy';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\n  /**\n   * Reference to the underlying position strategy to which all the API calls are proxied.\n   * @docs-private\n   */\n  _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n\n  private _direction: Direction | null;\n\n  /** Whether the we're dealing with an RTL context */\n  get _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** Emits an event when the connection point changes. */\n  get onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n    return this._positionStrategy.positionChanges;\n  }\n\n  constructor(\n      originPos: OriginConnectionPosition, overlayPos: OverlayConnectionPosition,\n      connectedTo: ElementRef<HTMLElement>, viewportRuler: ViewportRuler, document: Document,\n      platform: Platform, overlayContainer: OverlayContainer) {\n    // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n    // the extra logic, we create an instance of the positioning strategy that has some\n    // defaults that make it behave as the old position strategy and to which we'll\n    // proxy all of the API calls.\n    this._positionStrategy = new FlexibleConnectedPositionStrategy(\n                                 connectedTo, viewportRuler, document, platform, overlayContainer)\n                                 .withFlexibleDimensions(false)\n                                 .withPush(false)\n                                 .withViewportMargin(0);\n\n    this.withFallbackPosition(originPos, overlayPos);\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions(): ConnectionPositionPair[] {\n    return this._preferredPositions;\n  }\n\n  /** Attach this position strategy to an overlay. */\n  attach(overlayRef: OverlayReference): void {\n    this._overlayRef = overlayRef;\n    this._positionStrategy.attach(overlayRef);\n\n    if (this._direction) {\n      overlayRef.setDirection(this._direction);\n      this._direction = null;\n    }\n  }\n\n  /** Disposes all resources used by the position strategy. */\n  dispose() {\n    this._positionStrategy.dispose();\n  }\n\n  /** @docs-private */\n  detach() {\n    this._positionStrategy.detach();\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin fits on-screen.\n   * @docs-private\n   */\n  apply(): void {\n    this._positionStrategy.apply();\n  }\n\n  /**\n   * Re-positions the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  recalculateLastPosition(): void {\n    this._positionStrategy.reapplyLastPosition();\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]) {\n    this._positionStrategy.withScrollableContainers(scrollables);\n  }\n\n  /**\n   * Adds a new preferred fallback position.\n   * @param originPos\n   * @param overlayPos\n   */\n  withFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\n      offsetX?: number,\n      offsetY?: number): this {\n\n    const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n    this._preferredPositions.push(position);\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the layout direction so the overlay's position can be adjusted to match.\n   * @param dir New layout direction.\n   */\n  withDirection(dir: 'ltr' | 'rtl'): this {\n    // Since the direction might be declared before the strategy is attached,\n    // we save the value in a temporary property and we'll transfer it to the\n    // overlay ref on attachment.\n    if (this._overlayRef) {\n      this._overlayRef.setDirection(dir);\n    } else {\n      this._direction = dir;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the x-axis\n   * @param offset New offset in the X axis.\n   */\n  withOffsetX(offset: number): this {\n    this._positionStrategy.withDefaultOffsetX(offset);\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the y-axis\n   * @param  offset New offset in the Y axis.\n   */\n  withOffsetY(offset: number): this {\n    this._positionStrategy.withDefaultOffsetY(offset);\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked: boolean): this {\n    this._positionStrategy.withLockedPosition(isLocked);\n    return this;\n  }\n\n  /**\n   * Overwrites the current set of positions with an array of new ones.\n   * @param positions Position pairs to be set on the strategy.\n   */\n  withPositions(positions: ConnectionPositionPair[]): this {\n    this._preferredPositions = positions.slice();\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n  setOrigin(origin: ElementRef): this {\n    this._positionStrategy.setOrigin(origin);\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {OverlayReference} from '../overlay-reference';\n\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n  private _cssPosition: string = 'static';\n  private _topOffset: string = '';\n  private _bottomOffset: string = '';\n  private _leftOffset: string = '';\n  private _rightOffset: string = '';\n  private _alignItems: string = '';\n  private _justifyContent: string = '';\n  private _width: string = '';\n  private _height: string = '';\n  private _isDisposed: boolean;\n\n  attach(overlayRef: OverlayReference): void {\n    const config = overlayRef.getConfig();\n\n    this._overlayRef = overlayRef;\n\n    if (this._width && !config.width) {\n      overlayRef.updateSize({width: this._width});\n    }\n\n    if (this._height && !config.height) {\n      overlayRef.updateSize({height: this._height});\n    }\n\n    overlayRef.hostElement.classList.add(wrapperClass);\n    this._isDisposed = false;\n  }\n\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n  top(value: string = ''): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n  left(value: string = ''): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n  bottom(value: string = ''): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n  right(value: string = ''): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  width(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({width: value});\n    } else {\n      this._width = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  height(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({height: value});\n    } else {\n      this._height = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n  centerHorizontally(offset: string = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n  centerVertically(offset: string = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n  apply(): void {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n    const config = this._overlayRef.getConfig();\n\n    styles.position = this._cssPosition;\n    styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n    styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n\n    if (config.width === '100%') {\n      parentStyles.justifyContent = 'flex-start';\n    } else if (this._justifyContent === 'center') {\n      parentStyles.justifyContent = 'center';\n    } else if (this._overlayRef.getConfig().direction === 'rtl') {\n      // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n      // don't want that because our positioning is explicitly `left` and `right`, hence\n      // why we do another inversion to ensure that the overlay stays in the same position.\n      // TODO: reconsider this if we add `start` and `end` methods.\n      if (this._justifyContent === 'flex-start') {\n        parentStyles.justifyContent = 'flex-end';\n      } else if (this._justifyContent === 'flex-end') {\n        parentStyles.justifyContent = 'flex-start';\n      }\n    } else {\n      parentStyles.justifyContent = this._justifyContent;\n    }\n\n    parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n  }\n\n  /**\n   * Cleans up the DOM changes from the position strategy.\n   * @docs-private\n   */\n  dispose(): void {\n    if (this._isDisposed || !this._overlayRef) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parent = this._overlayRef.hostElement;\n    const parentStyles = parent.style;\n\n    parent.classList.remove(wrapperClass);\n    parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n      styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n\n    this._overlayRef = null!;\n    this._isDisposed = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {ElementRef, Inject, Injectable} from '@angular/core';\n\nimport {OverlayContainer} from '../overlay-container';\n\nimport {OriginConnectionPosition, OverlayConnectionPosition} from './connected-position';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {\n  FlexibleConnectedPositionStrategy,\n  FlexibleConnectedPositionStrategyOrigin,\n} from './flexible-connected-position-strategy';\nimport {GlobalPositionStrategy} from './global-position-strategy';\n\n\n/** Builder for overlay position strategy. */\n@Injectable({providedIn: 'root'})\nexport class OverlayPositionBuilder {\n  constructor(\n      private _viewportRuler: ViewportRuler, @Inject(DOCUMENT) private _document: any,\n      private _platform: Platform, private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Creates a global position strategy.\n   */\n  global(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n\n  /**\n   * Creates a relative position strategy.\n   * @param elementRef\n   * @param originPos\n   * @param overlayPos\n   * @deprecated Use `flexibleConnectedTo` instead.\n   * @breaking-change 8.0.0\n   */\n  connectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n    return new ConnectedPositionStrategy(\n        originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform,\n        this._overlayContainer);\n  }\n\n  /**\n   * Creates a flexible position strategy.\n   * @param origin Origin relative to which to position the overlay.\n   */\n  flexibleConnectedTo(origin: FlexibleConnectedPositionStrategyOrigin):\n    FlexibleConnectedPositionStrategy {\n    return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document,\n        this._platform, this._overlayContainer);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT, Location} from '@angular/common';\nimport {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  Injector,\n  NgZone,\n  Optional,\n} from '@angular/core';\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayContainer} from './overlay-container';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {ScrollStrategyOptions} from './scroll/index';\n\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\n// it needs is different based on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n@Injectable()\nexport class Overlay {\n  private _appRef: ApplicationRef;\n\n  constructor(\n              /** Scrolling strategies that can be used when creating an overlay. */\n              public scrollStrategies: ScrollStrategyOptions,\n              private _overlayContainer: OverlayContainer,\n              private _componentFactoryResolver: ComponentFactoryResolver,\n              private _positionBuilder: OverlayPositionBuilder,\n              private _keyboardDispatcher: OverlayKeyboardDispatcher,\n              private _injector: Injector,\n              private _ngZone: NgZone,\n              @Inject(DOCUMENT) private _document: any,\n              private _directionality: Directionality,\n              // @breaking-change 8.0.0 `_location` parameter to be made required.\n              @Optional() private _location?: Location) { }\n\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(config?: OverlayConfig): OverlayRef {\n    const host = this._createHostElement();\n    const pane = this._createPaneElement(host);\n    const portalOutlet = this._createPortalOutlet(pane);\n    const overlayConfig = new OverlayConfig(config);\n\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone,\n      this._keyboardDispatcher, this._document, this._location);\n  }\n\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n  position(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(host: HTMLElement): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n\n    return pane;\n  }\n\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n  private _createHostElement(): HTMLElement {\n    const host = this._document.createElement('div');\n    this._overlayContainer.getContainerElement().appendChild(host);\n    return host;\n  }\n\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\n    }\n\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {Overlay} from './overlay';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayRef} from './overlay-ref';\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\nimport {\n  ConnectedPosition,\n  FlexibleConnectedPositionStrategy,\n} from './position/flexible-connected-position-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n  ScrollStrategy,\n} from './scroll/index';\n\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList: ConnectedPosition[] = [\n  {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top'\n  },\n  {\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'top',\n    overlayX: 'end',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'bottom',\n    overlayX: 'end',\n    overlayY: 'top'\n  }\n];\n\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('cdk-connected-overlay-scroll-strategy');\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return (config?: RepositionScrollStrategyConfig) => overlay.scrollStrategies.reposition(config);\n}\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n})\nexport class CdkOverlayOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef) { }\n}\n\n\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay'\n})\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\n  private _overlayRef: OverlayRef;\n  private _templatePortal: TemplatePortal;\n  private _hasBackdrop = false;\n  private _lockPosition = false;\n  private _growAfterOpen = false;\n  private _flexibleDimensions = false;\n  private _push = false;\n  private _backdropSubscription = Subscription.EMPTY;\n  private _offsetX: number;\n  private _offsetY: number;\n  private _position: FlexibleConnectedPositionStrategy;\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Origin for the connected overlay. */\n  @Input('cdkConnectedOverlayOrigin') origin: CdkOverlayOrigin;\n\n  /** Registered connected position pairs. */\n  @Input('cdkConnectedOverlayPositions') positions: ConnectedPosition[];\n\n  /** The offset in pixels for the overlay connection point on the x-axis */\n  @Input('cdkConnectedOverlayOffsetX')\n  get offsetX(): number { return this._offsetX; }\n  set offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The offset in pixels for the overlay connection point on the y-axis */\n  @Input('cdkConnectedOverlayOffsetY')\n  get offsetY() { return this._offsetY; }\n  set offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The width of the overlay panel. */\n  @Input('cdkConnectedOverlayWidth') width: number | string;\n\n  /** The height of the overlay panel. */\n  @Input('cdkConnectedOverlayHeight') height: number | string;\n\n  /** The min width of the overlay panel. */\n  @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\n\n  /** The min height of the overlay panel. */\n  @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\n\n  /** The custom class to be set on the backdrop element. */\n  @Input('cdkConnectedOverlayBackdropClass') backdropClass: string;\n\n  /** The custom class to add to the overlay pane element. */\n  @Input('cdkConnectedOverlayPanelClass') panelClass: string | string[];\n\n  /** Margin between the overlay and the viewport edges. */\n  @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: ScrollStrategy;\n\n  /** Whether the overlay is open. */\n  @Input('cdkConnectedOverlayOpen') open: boolean = false;\n\n  /** Whether or not the overlay should attach a backdrop. */\n  @Input('cdkConnectedOverlayHasBackdrop')\n  get hasBackdrop() { return this._hasBackdrop; }\n  set hasBackdrop(value: any) { this._hasBackdrop = coerceBooleanProperty(value); }\n\n  /** Whether or not the overlay should be locked when scrolling. */\n  @Input('cdkConnectedOverlayLockPosition')\n  get lockPosition() { return this._lockPosition; }\n  set lockPosition(value: any) { this._lockPosition = coerceBooleanProperty(value); }\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  @Input('cdkConnectedOverlayFlexibleDimensions')\n  get flexibleDimensions() { return this._flexibleDimensions; }\n  set flexibleDimensions(value: boolean) {\n    this._flexibleDimensions = coerceBooleanProperty(value);\n  }\n\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n  @Input('cdkConnectedOverlayGrowAfterOpen')\n  get growAfterOpen() { return this._growAfterOpen; }\n  set growAfterOpen(value: boolean) { this._growAfterOpen = coerceBooleanProperty(value); }\n\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  @Input('cdkConnectedOverlayPush')\n  get push() { return this._push; }\n  set push(value: boolean) { this._push = coerceBooleanProperty(value); }\n\n  /** Event emitted when the backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<MouseEvent>();\n\n  /** Event emitted when the position has changed. */\n  @Output() positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n\n  /** Event emitted when the overlay has been attached. */\n  @Output() attach = new EventEmitter<void>();\n\n  /** Event emitted when the overlay has been detached. */\n  @Output() detach = new EventEmitter<void>();\n\n  /** Emits when there are keyboard events that are targeted at the overlay. */\n  @Output() overlayKeydown = new EventEmitter<KeyboardEvent>();\n\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n\n  constructor(\n      private _overlay: Overlay,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\n      @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) scrollStrategyFactory: any,\n      @Optional() private _dir: Directionality) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n\n  /** The associated overlay reference. */\n  get overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n\n  /** The element's layout direction. */\n  get dir(): Direction {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    this._backdropSubscription.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n      this._overlayRef.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight,\n      });\n\n      if (changes['origin'] && this.open) {\n        this._position.apply();\n      }\n    }\n\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n\n  /** Creates an overlay */\n  private _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n\n    this._overlayRef.keydownEvents().subscribe((event: KeyboardEvent) => {\n      this.overlayKeydown.next(event);\n\n      if (event.keyCode === ESCAPE && !hasModifierKey(event)) {\n        event.preventDefault();\n        this._detachOverlay();\n      }\n    });\n  }\n\n  /** Builds the overlay config based on the directive's inputs */\n  private _buildConfig(): OverlayConfig {\n    const positionStrategy = this._position = this._createPositionStrategy();\n    const overlayConfig = new OverlayConfig({\n      direction: this._dir,\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    if (this.panelClass) {\n      overlayConfig.panelClass = this.panelClass;\n    }\n\n    return overlayConfig;\n  }\n\n  /** Updates the state of a position strategy, based on the values of the directive inputs. */\n  private _updatePositionStrategy(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const positions: ConnectedPosition[] = this.positions.map(currentPosition => ({\n      originX: currentPosition.originX,\n      originY: currentPosition.originY,\n      overlayX: currentPosition.overlayX,\n      overlayY: currentPosition.overlayY,\n      offsetX: currentPosition.offsetX || this.offsetX,\n      offsetY: currentPosition.offsetY || this.offsetY,\n      panelClass: currentPosition.panelClass || undefined,\n    }));\n\n    return positionStrategy\n      .setOrigin(this.origin.elementRef)\n      .withPositions(positions)\n      .withFlexibleDimensions(this.flexibleDimensions)\n      .withPush(this.push)\n      .withGrowAfterOpen(this.growAfterOpen)\n      .withViewportMargin(this.viewportMargin)\n      .withLockedPosition(this.lockPosition);\n  }\n\n  /** Returns the position strategy of the overlay to be set on the overlay config */\n  private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\n    const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n\n    this._updatePositionStrategy(strategy);\n    strategy.positionChanges.subscribe(p => this.positionChange.emit(p));\n\n    return strategy;\n  }\n\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n  private _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    } else {\n      this._backdropSubscription.unsubscribe();\n    }\n  }\n\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n  private _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n\n    this._backdropSubscription.unsubscribe();\n  }\n}\n\n\n/** @docs-private */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {NgModule, Provider} from '@angular/core';\nimport {OVERLAY_KEYBOARD_DISPATCHER_PROVIDER} from './keyboard/overlay-keyboard-dispatcher';\nimport {Overlay} from './overlay';\nimport {OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\nimport {\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  CdkConnectedOverlay,\n  CdkOverlayOrigin,\n} from './overlay-directives';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\n\n\n@NgModule({\n  imports: [BidiModule, PortalModule, ScrollingModule],\n  exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n  declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n  providers: [\n    Overlay,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  ],\n})\nexport class OverlayModule {}\n\n\n/**\n * @deprecated Use `OverlayModule` instead.\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n  VIEWPORT_RULER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, OnDestroy} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n@Injectable({providedIn: 'root'})\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\n  private _fullScreenEventName: string | undefined;\n  private _fullScreenListener: () => void;\n\n  constructor(@Inject(DOCUMENT) _document: any) {\n    super(_document);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n\n  protected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n\n  private _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n\n    const fullscreenElement = this.getFullscreenElement();\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n\n  private _addFullscreenChangeListener(fn: () => void) {\n    const eventName = this._getEventName();\n\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n\n      this._document.addEventListener(eventName, fn);\n      this._fullScreenListener = fn;\n    }\n  }\n\n  private _getEventName(): string | undefined {\n    if (!this._fullScreenEventName) {\n      const _document = this._document as any;\n\n      if (_document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (_document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if (_document.mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if (_document.msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n\n    return this._fullScreenEventName;\n  }\n\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   */\n  getFullscreenElement(): Element {\n    const _document = this._document as any;\n\n    return _document.fullscreenElement ||\n           _document.webkitFullscreenElement ||\n           _document.mozFullScreenElement ||\n           _document.msFullscreenElement ||\n           null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}